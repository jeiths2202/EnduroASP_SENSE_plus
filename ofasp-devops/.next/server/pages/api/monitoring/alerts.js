"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/monitoring/alerts";
exports.ids = ["pages/api/monitoring/alerts"];
exports.modules = {

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fmonitoring%2Falerts&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fmonitoring%2Falerts.ts&middlewareConfigBase64=e30%3D!":
/*!**************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fmonitoring%2Falerts&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fmonitoring%2Falerts.ts&middlewareConfigBase64=e30%3D! ***!
  \**************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _src_pages_api_monitoring_alerts_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/pages/api/monitoring/alerts.ts */ \"(api)/./src/pages/api/monitoring/alerts.ts\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_monitoring_alerts_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_monitoring_alerts_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/monitoring/alerts\",\n        pathname: \"/api/monitoring/alerts\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _src_pages_api_monitoring_alerts_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRm1vbml0b3JpbmclMkZhbGVydHMmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZzcmMlMkZwYWdlcyUyRmFwaSUyRm1vbml0b3JpbmclMkZhbGVydHMudHMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ0w7QUFDMUQ7QUFDaUU7QUFDakU7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLGdFQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyxnRUFBUTtBQUNwQztBQUNPLHdCQUF3QixnSEFBbUI7QUFDbEQ7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vZmFzcC1kZXZvcHMvPzUzMmUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFnZXNBUElSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL3BhZ2VzLWFwaS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3NyYy9wYWdlcy9hcGkvbW9uaXRvcmluZy9hbGVydHMudHNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgXCJkZWZhdWx0XCIpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgXCJjb25maWdcIik7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9tb25pdG9yaW5nL2FsZXJ0c1wiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL21vbml0b3JpbmcvYWxlcnRzXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogXCJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwiXCJcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fmonitoring%2Falerts&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fmonitoring%2Falerts.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./src/pages/api/monitoring/alerts.ts":
/*!********************************************!*\
  !*** ./src/pages/api/monitoring/alerts.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n// Mock alert data\nlet mockAlerts = [\n    {\n        id: \"alert_001\",\n        timestamp: new Date(Date.now() - 300000).toISOString(),\n        severity: \"critical\",\n        status: \"active\",\n        source: \"system-metrics\",\n        title: \"High CPU Usage\",\n        description: \"CPU usage has exceeded 90% for more than 5 minutes\",\n        metric: {\n            name: \"cpu_usage\",\n            value: 92.5,\n            threshold: 90,\n            unit: \"%\"\n        },\n        actions: {\n            acknowledge: true,\n            resolve: true,\n            silence: true\n        },\n        tags: [\n            \"cpu\",\n            \"performance\",\n            \"system\"\n        ]\n    },\n    {\n        id: \"alert_002\",\n        timestamp: new Date(Date.now() - 600000).toISOString(),\n        severity: \"high\",\n        status: \"acknowledged\",\n        source: \"deployment\",\n        title: \"Deployment Failure\",\n        description: \"Production deployment failed with exit code 1\",\n        acknowledgedBy: \"ops-team\",\n        actions: {\n            acknowledge: false,\n            resolve: true,\n            silence: true\n        },\n        tags: [\n            \"deployment\",\n            \"production\",\n            \"failure\"\n        ]\n    },\n    {\n        id: \"alert_003\",\n        timestamp: new Date(Date.now() - 900000).toISOString(),\n        severity: \"medium\",\n        status: \"resolved\",\n        source: \"application\",\n        title: \"High Response Time\",\n        description: \"API response time exceeded 2 seconds for 3 consecutive requests\",\n        metric: {\n            name: \"response_time\",\n            value: 2.8,\n            threshold: 2.0,\n            unit: \"s\"\n        },\n        resolvedAt: new Date(Date.now() - 300000).toISOString(),\n        tags: [\n            \"api\",\n            \"performance\",\n            \"response-time\"\n        ]\n    },\n    {\n        id: \"alert_004\",\n        timestamp: new Date(Date.now() - 1200000).toISOString(),\n        severity: \"low\",\n        status: \"active\",\n        source: \"monitoring\",\n        title: \"Disk Space Warning\",\n        description: \"Disk usage is above 80%\",\n        metric: {\n            name: \"disk_usage\",\n            value: 85.2,\n            threshold: 80,\n            unit: \"%\"\n        },\n        actions: {\n            acknowledge: true,\n            resolve: true,\n            silence: true\n        },\n        tags: [\n            \"disk\",\n            \"storage\",\n            \"warning\"\n        ]\n    }\n];\nconst mockAlertRules = [\n    {\n        id: \"rule_001\",\n        name: \"High CPU Usage\",\n        description: \"Alert when CPU usage exceeds threshold\",\n        enabled: true,\n        metric: \"cpu_usage\",\n        condition: \"greater_than\",\n        threshold: 90,\n        duration: 300,\n        severity: \"critical\",\n        tags: [\n            \"cpu\",\n            \"system\"\n        ],\n        notifications: {\n            slack: true,\n            email: true,\n            webhook: false\n        }\n    },\n    {\n        id: \"rule_002\",\n        name: \"Memory Usage Critical\",\n        description: \"Alert when memory usage exceeds 95%\",\n        enabled: true,\n        metric: \"memory_usage\",\n        condition: \"greater_than\",\n        threshold: 95,\n        duration: 180,\n        severity: \"critical\",\n        tags: [\n            \"memory\",\n            \"system\"\n        ],\n        notifications: {\n            slack: true,\n            email: true,\n            webhook: true\n        }\n    },\n    {\n        id: \"rule_003\",\n        name: \"Deployment Failure\",\n        description: \"Alert when deployment fails\",\n        enabled: true,\n        metric: \"deployment_status\",\n        condition: \"equals\",\n        threshold: 0,\n        duration: 0,\n        severity: \"high\",\n        tags: [\n            \"deployment\",\n            \"ci-cd\"\n        ],\n        notifications: {\n            slack: true,\n            email: true,\n            webhook: false\n        }\n    },\n    {\n        id: \"rule_004\",\n        name: \"API Response Time\",\n        description: \"Alert when API response time is high\",\n        enabled: true,\n        metric: \"response_time\",\n        condition: \"greater_than\",\n        threshold: 2.0,\n        duration: 60,\n        severity: \"medium\",\n        tags: [\n            \"api\",\n            \"performance\"\n        ],\n        notifications: {\n            slack: true,\n            email: false,\n            webhook: false\n        }\n    }\n];\nasync function handler(req, res) {\n    const { method, query } = req;\n    switch(method){\n        case \"GET\":\n            if (query.rules === \"true\") {\n                return getAlertRules(req, res);\n            }\n            return getAlerts(req, res);\n        case \"POST\":\n            return createAlert(req, res);\n        case \"PUT\":\n            return updateAlert(req, res);\n        case \"DELETE\":\n            return deleteAlert(req, res);\n        default:\n            res.setHeader(\"Allow\", [\n                \"GET\",\n                \"POST\",\n                \"PUT\",\n                \"DELETE\"\n            ]);\n            return res.status(405).json({\n                error: `Method ${method} Not Allowed`\n            });\n    }\n}\nasync function getAlerts(req, res) {\n    try {\n        const { severity, status, source, timeRange = \"24h\", limit = \"50\", offset = \"0\" } = req.query;\n        let filteredAlerts = [\n            ...mockAlerts\n        ];\n        // Apply filters\n        if (severity && severity !== \"all\") {\n            filteredAlerts = filteredAlerts.filter((alert)=>alert.severity === severity);\n        }\n        if (status && status !== \"all\") {\n            filteredAlerts = filteredAlerts.filter((alert)=>alert.status === status);\n        }\n        if (source && source !== \"all\") {\n            filteredAlerts = filteredAlerts.filter((alert)=>alert.source === source);\n        }\n        // Time range filter\n        if (timeRange !== \"all\") {\n            const now = new Date();\n            let cutoffTime = new Date();\n            switch(timeRange){\n                case \"1h\":\n                    cutoffTime.setHours(now.getHours() - 1);\n                    break;\n                case \"6h\":\n                    cutoffTime.setHours(now.getHours() - 6);\n                    break;\n                case \"24h\":\n                    cutoffTime.setHours(now.getHours() - 24);\n                    break;\n                case \"7d\":\n                    cutoffTime.setDate(now.getDate() - 7);\n                    break;\n            }\n            filteredAlerts = filteredAlerts.filter((alert)=>new Date(alert.timestamp) >= cutoffTime);\n        }\n        // Sort by timestamp (newest first)\n        filteredAlerts.sort((a, b)=>new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\n        // Pagination\n        const limitNum = parseInt(limit);\n        const offsetNum = parseInt(offset);\n        const total = filteredAlerts.length;\n        const paginatedAlerts = filteredAlerts.slice(offsetNum, offsetNum + limitNum);\n        // Calculate summary\n        const summary = {\n            total: filteredAlerts.length,\n            active: filteredAlerts.filter((a)=>a.status === \"active\").length,\n            critical: filteredAlerts.filter((a)=>a.severity === \"critical\").length,\n            high: filteredAlerts.filter((a)=>a.severity === \"high\").length,\n            medium: filteredAlerts.filter((a)=>a.severity === \"medium\").length,\n            low: filteredAlerts.filter((a)=>a.severity === \"low\").length,\n            resolved: filteredAlerts.filter((a)=>a.status === \"resolved\").length,\n            acknowledged: filteredAlerts.filter((a)=>a.status === \"acknowledged\").length\n        };\n        return res.status(200).json({\n            alerts: paginatedAlerts,\n            total,\n            summary\n        });\n    } catch (error) {\n        console.error(\"Error fetching alerts:\", error);\n        return res.status(500).json({\n            error: \"Failed to fetch alerts\"\n        });\n    }\n}\nasync function getAlertRules(req, res) {\n    try {\n        const { enabled } = req.query;\n        let rules = [\n            ...mockAlertRules\n        ];\n        if (enabled !== undefined) {\n            rules = rules.filter((rule)=>rule.enabled === (enabled === \"true\"));\n        }\n        return res.status(200).json({\n            rules\n        });\n    } catch (error) {\n        console.error(\"Error fetching alert rules:\", error);\n        return res.status(500).json({\n            error: \"Failed to fetch alert rules\"\n        });\n    }\n}\nasync function createAlert(req, res) {\n    try {\n        const alertData = req.body;\n        const newAlert = {\n            id: `alert_${Date.now()}`,\n            timestamp: new Date().toISOString(),\n            status: \"active\",\n            actions: {\n                acknowledge: true,\n                resolve: true,\n                silence: true\n            },\n            ...alertData\n        };\n        mockAlerts.unshift(newAlert);\n        // Simulate sending notifications\n        console.log(`🚨 New ${newAlert.severity} alert: ${newAlert.title}`);\n        return res.status(201).json({\n            alert: newAlert\n        });\n    } catch (error) {\n        console.error(\"Error creating alert:\", error);\n        return res.status(500).json({\n            error: \"Failed to create alert\"\n        });\n    }\n}\nasync function updateAlert(req, res) {\n    try {\n        const { id } = req.query;\n        const updates = req.body;\n        const alertIndex = mockAlerts.findIndex((alert)=>alert.id === id);\n        if (alertIndex === -1) {\n            return res.status(404).json({\n                error: \"Alert not found\"\n            });\n        }\n        // Handle specific actions\n        if (updates.action) {\n            switch(updates.action){\n                case \"acknowledge\":\n                    mockAlerts[alertIndex].status = \"acknowledged\";\n                    mockAlerts[alertIndex].acknowledgedBy = updates.acknowledgedBy || \"user\";\n                    break;\n                case \"resolve\":\n                    mockAlerts[alertIndex].status = \"resolved\";\n                    mockAlerts[alertIndex].resolvedAt = new Date().toISOString();\n                    break;\n                case \"silence\":\n                    mockAlerts[alertIndex].status = \"silenced\";\n                    break;\n            }\n        } else {\n            // General update\n            mockAlerts[alertIndex] = {\n                ...mockAlerts[alertIndex],\n                ...updates\n            };\n        }\n        console.log(`🔄 Alert ${id} updated: ${updates.action || \"modified\"}`);\n        return res.status(200).json({\n            alert: mockAlerts[alertIndex]\n        });\n    } catch (error) {\n        console.error(\"Error updating alert:\", error);\n        return res.status(500).json({\n            error: \"Failed to update alert\"\n        });\n    }\n}\nasync function deleteAlert(req, res) {\n    try {\n        const { id } = req.query;\n        const alertIndex = mockAlerts.findIndex((alert)=>alert.id === id);\n        if (alertIndex === -1) {\n            return res.status(404).json({\n                error: \"Alert not found\"\n            });\n        }\n        const deletedAlert = mockAlerts.splice(alertIndex, 1)[0];\n        console.log(`🗑️ Alert ${id} deleted: ${deletedAlert.title}`);\n        return res.status(200).json({\n            message: \"Alert deleted successfully\"\n        });\n    } catch (error) {\n        console.error(\"Error deleting alert:\", error);\n        return res.status(500).json({\n            error: \"Failed to delete alert\"\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/monitoring/alerts.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fmonitoring%2Falerts&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fmonitoring%2Falerts.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();