name: ABEND Auto-Fix Pipeline

on:
  repository_dispatch:
    types: [abend-detected]
  workflow_dispatch:
    inputs:
      abend_code:
        description: 'ABEND Code (e.g., CEE3204S)'
        required: true
        default: 'CEE3204S'
      location:
        description: 'ABEND Location (e.g., MAIN001.handleF3Key)'
        required: true
        default: 'MAIN001.handleF3Key'
      fix_type:
        description: 'Fix Type'
        required: true
        default: 'f3_key_fix'
        type: choice
        options:
          - f3_key_fix
          - memory_fix
          - null_pointer_fix

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '11'
  ABEND_LOG_PATH: '/home/aspuser/app/logs/abend.log'
  BACKUP_DIR: '/home/aspuser/app/volume/DISK01/JAVA/backups'

jobs:
  detect-and-analyze:
    name: üîç Detect and Analyze ABEND
    runs-on: self-hosted
    outputs:
      abend_detected: ${{ steps.analyze.outputs.abend_detected }}
      abend_code: ${{ steps.analyze.outputs.abend_code }}
      fix_required: ${{ steps.analyze.outputs.fix_required }}
      backup_created: ${{ steps.backup.outputs.backup_created }}
    
    steps:
      - name: üìã Checkout Code
        uses: actions/checkout@v4
        
      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: üîç Analyze ABEND Logs
        id: analyze
        run: |
          echo "üîç Analyzing ABEND logs..."
          
          # Check if ABEND detected
          if [ -f "${{ env.ABEND_LOG_PATH }}" ]; then
            LATEST_ABEND=$(tail -1 "${{ env.ABEND_LOG_PATH }}")
            echo "Latest ABEND: $LATEST_ABEND"
            
            if [[ "$LATEST_ABEND" == *"CEE3204S"* ]] && [[ "$LATEST_ABEND" == *"handleF3Key"* ]]; then
              echo "‚úÖ F3 key ABEND detected - Auto-fix required"
              echo "abend_detected=true" >> $GITHUB_OUTPUT
              echo "abend_code=CEE3204S" >> $GITHUB_OUTPUT
              echo "fix_required=true" >> $GITHUB_OUTPUT
            else
              echo "‚ÑπÔ∏è No F3 key ABEND detected"
              echo "abend_detected=false" >> $GITHUB_OUTPUT
              echo "fix_required=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ö†Ô∏è ABEND log file not found"
            echo "abend_detected=false" >> $GITHUB_OUTPUT
            echo "fix_required=false" >> $GITHUB_OUTPUT
          fi
          
      - name: üíæ Create Backup
        id: backup
        if: steps.analyze.outputs.fix_required == 'true'
        run: |
          echo "üíæ Creating backup before auto-fix..."
          
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          BACKUP_FILE="${{ env.BACKUP_DIR }}/MAIN001_abend_fix_${TIMESTAMP}.java"
          
          mkdir -p "${{ env.BACKUP_DIR }}"
          cp "/home/aspuser/app/volume/DISK01/JAVA/MAIN001.java" "$BACKUP_FILE"
          
          echo "‚úÖ Backup created: $BACKUP_FILE"
          echo "backup_created=true" >> $GITHUB_OUTPUT
          echo "backup_file=$BACKUP_FILE" >> $GITHUB_OUTPUT

  auto-fix:
    name: üîß Auto-Fix ABEND
    runs-on: self-hosted
    needs: detect-and-analyze
    if: needs.detect-and-analyze.outputs.fix_required == 'true'
    outputs:
      fix_applied: ${{ steps.fix.outputs.fix_applied }}
      compilation_success: ${{ steps.compile.outputs.compilation_success }}
      
    steps:
      - name: üîß Apply F3 Key Fix
        id: fix
        run: |
          echo "üîß Applying automatic F3 key ABEND fix..."
          
          MAIN001_FILE="/home/aspuser/app/volume/DISK01/JAVA/MAIN001.java"
          
          # Create the fixed version
          python3 << 'EOF'
          import re
          
          # Read the current file
          with open('/home/aspuser/app/volume/DISK01/JAVA/MAIN001.java', 'r', encoding='utf-8') as f:
              content = f.read()
          
          # Apply the fix: Change triggerAbendOnF3() to returnToLogo()
          fixed_content = content.replace(
              'triggerAbendOnF3();',
              'returnToLogo();'
          )
          
          # Also update the comment
          fixed_content = fixed_content.replace(
              '// CRITICAL: This is the test scenario - F3 triggers ABEND\n        // After DevOps fixes, this should be changed to returnToLogo()',
              '// FIXED: F3 now returns to LOGO screen as intended\n        // Auto-fixed by DevOps pipeline'
          )
          
          # Write the fixed file
          with open('/home/aspuser/app/volume/DISK01/JAVA/MAIN001.java', 'w', encoding='utf-8') as f:
              f.write(fixed_content)
          
          print("‚úÖ F3 key fix applied successfully")
          EOF
          
          echo "fix_applied=true" >> $GITHUB_OUTPUT
          
      - name: ‚òï Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          
      - name: üî® Compile Fixed Code
        id: compile
        run: |
          echo "üî® Compiling fixed MAIN001.java..."
          
          cd /home/aspuser/app/volume/DISK01/JAVA
          
          # Compile with proper classpath
          if javac -encoding UTF-8 -cp ".:../../../server/java_classes" MAIN001.java; then
            echo "‚úÖ Compilation successful"
            echo "compilation_success=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Compilation failed"
            echo "compilation_success=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
      - name: üß™ Test Fixed Code
        id: test
        if: steps.compile.outputs.compilation_success == 'true'
        run: |
          echo "üß™ Testing fixed F3 key functionality..."
          
          cd /home/aspuser/app/volume/DISK01/JAVA
          
          # Create test script for F3 fix verification
          cat << 'EOF' > test_f3_fix.java
          import java.lang.reflect.Method;
          
          public class test_f3_fix {
              public static void main(String[] args) {
                  try {
                      // Load MAIN001 class
                      Class<?> main001Class = Class.forName("MAIN001");
                      Object instance = main001Class.getDeclaredConstructor().newInstance();
                      
                      // Check if handleF3Key method exists
                      Method handleF3Method = main001Class.getDeclaredMethod("handleF3Key");
                      handleF3Method.setAccessible(true);
                      
                      System.out.println("‚úÖ F3 key handler method found");
                      System.out.println("‚úÖ Fix verification completed successfully");
                      
                  } catch (Exception e) {
                      System.err.println("‚ùå Fix verification failed: " + e.getMessage());
                      System.exit(1);
                  }
              }
          }
          EOF
          
          javac test_f3_fix.java
          java test_f3_fix
          
          echo "‚úÖ F3 fix test passed"

  deploy:
    name: üöÄ Deploy Fixed Code
    runs-on: self-hosted
    needs: [detect-and-analyze, auto-fix]
    if: needs.auto-fix.outputs.compilation_success == 'true'
    
    steps:
      - name: üöÄ Deploy to Production
        run: |
          echo "üöÄ Deploying fixed MAIN001 to production..."
          
          # The compiled class is already in place, so deployment is complete
          echo "‚úÖ Fixed MAIN001.class deployed successfully"
          
      - name: üîÑ Restart Services
        run: |
          echo "üîÑ Restarting affected services..."
          
          # Check if any Java processes need restart
          if pgrep -f "MAIN001" > /dev/null; then
            echo "üîÑ MAIN001 processes detected, preparing for restart"
            # Kill existing MAIN001 processes gracefully
            pkill -f "MAIN001" || true
            sleep 2
          fi
          
          echo "‚úÖ Services restart completed"
          
      - name: ‚úÖ Verify Fix Deployment
        run: |
          echo "‚úÖ Verifying fix deployment..."
          
          # Test that F3 key no longer triggers ABEND
          cd /home/aspuser/app/volume/DISK01/JAVA
          
          # Create verification test
          cat << 'EOF' > verify_deployment.java
          public class verify_deployment {
              public static void main(String[] args) {
                  System.out.println("üîç Verifying F3 fix deployment...");
                  
                  try {
                      // Check if the fix was applied by examining the source
                      String sourceFile = "/home/aspuser/app/volume/DISK01/JAVA/MAIN001.java";
                      java.nio.file.Path path = java.nio.file.Paths.get(sourceFile);
                      String content = new String(java.nio.file.Files.readAllBytes(path));
                      
                      if (content.contains("returnToLogo();")) {
                          System.out.println("‚úÖ F3 fix verified - returnToLogo() method called");
                      } else {
                          System.out.println("‚ùå Fix not found in source code");
                          System.exit(1);
                      }
                      
                      if (content.contains("Auto-fixed by DevOps pipeline")) {
                          System.out.println("‚úÖ DevOps auto-fix marker found");
                      }
                      
                      System.out.println("‚úÖ Deployment verification completed");
                      
                  } catch (Exception e) {
                      System.err.println("‚ùå Verification failed: " + e.getMessage());
                      System.exit(1);
                  }
              }
          }
          EOF
          
          javac verify_deployment.java
          java verify_deployment

  notify:
    name: üì¢ Notify Fix Completion
    runs-on: self-hosted
    needs: [detect-and-analyze, auto-fix, deploy]
    if: always()
    
    steps:
      - name: üì¢ Log Fix Results
        run: |
          echo "üì¢ ABEND Auto-Fix Pipeline Results:"
          echo "=================================="
          echo "ABEND Detected: ${{ needs.detect-and-analyze.outputs.abend_detected }}"
          echo "Fix Applied: ${{ needs.auto-fix.outputs.fix_applied }}"
          echo "Compilation: ${{ needs.auto-fix.outputs.compilation_success }}"
          echo "Timestamp: $(date)"
          
          # Log to monitoring system
          RESULT_LOG="/home/aspuser/app/logs/devops-fix.log"
          TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
          
          if [ "${{ needs.auto-fix.outputs.compilation_success }}" == "true" ]; then
            echo "[$TIMESTAMP] SUCCESS: F3 ABEND auto-fix completed successfully" >> "$RESULT_LOG"
          else
            echo "[$TIMESTAMP] FAILED: F3 ABEND auto-fix failed" >> "$RESULT_LOG"
          fi
          
      - name: üîÑ Update Monitoring
        run: |
          echo "üîÑ Updating monitoring systems..."
          
          # Clear ABEND log to reset monitoring
          if [ -f "${{ env.ABEND_LOG_PATH }}" ]; then
            echo "üßπ Clearing ABEND log to reset monitoring"
            > "${{ env.ABEND_LOG_PATH }}"
          fi
          
          # Trigger Zabbix re-check
          python3 /home/aspuser/app/monitoring/scripts/check_abend.py --json || true
          
          echo "‚úÖ Monitoring systems updated"