name: System Monitoring and Health Checks

on:
  schedule:
    # Run health checks every 5 minutes
    - cron: '*/5 * * * *'
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of monitoring check'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - health-only
        - metrics-only
        - alerts-only

env:
  MONITORING_ENABLED: true
  ALERT_WEBHOOK_URL: ${{ secrets.MONITORING_WEBHOOK_URL }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  # System health checks
  health-check:
    name: System Health Check
    runs-on: ubuntu-latest
    outputs:
      health-status: ${{ steps.health.outputs.status }}
      response-time: ${{ steps.health.outputs.response_time }}
      issues-detected: ${{ steps.health.outputs.issues }}
    
    steps:
    - name: Check application health
      id: health
      run: |
        echo "🏥 Running system health checks..."
        
        # Health check endpoints
        ENDPOINTS=(
          "http://localhost:3016/api/health"
          "http://localhost:3016/api/pipeline-status"
          "http://localhost:3016/api/monitoring/system-metrics"
        )
        
        TOTAL_RESPONSE_TIME=0
        FAILED_CHECKS=0
        HEALTH_ISSUES=()
        
        for endpoint in "${ENDPOINTS[@]}"; do
          echo "Checking endpoint: $endpoint"
          
          # Simulate health check (in production, use actual endpoints)
          RESPONSE_TIME=$(echo "scale=2; 50 + ($RANDOM % 200)" | bc)
          HTTP_STATUS=$((200 + ($RANDOM % 2) * 300)) # Mock 200 or 500
          
          TOTAL_RESPONSE_TIME=$(echo "$TOTAL_RESPONSE_TIME + $RESPONSE_TIME" | bc)
          
          if [ "$HTTP_STATUS" -eq 200 ]; then
            echo "✅ $endpoint - ${RESPONSE_TIME}ms"
          else
            echo "❌ $endpoint - Error ${HTTP_STATUS}"
            FAILED_CHECKS=$((FAILED_CHECKS + 1))
            HEALTH_ISSUES+=("$endpoint returned HTTP $HTTP_STATUS")
          fi
        done
        
        # Calculate average response time
        AVG_RESPONSE_TIME=$(echo "scale=2; $TOTAL_RESPONSE_TIME / ${#ENDPOINTS[@]}" | bc)
        
        # Determine overall health status
        if [ "$FAILED_CHECKS" -eq 0 ]; then
          HEALTH_STATUS="healthy"
          echo "✅ All health checks passed"
        elif [ "$FAILED_CHECKS" -le 1 ]; then
          HEALTH_STATUS="degraded"
          echo "⚠️ System degraded - $FAILED_CHECKS failed checks"
        else
          HEALTH_STATUS="unhealthy"
          echo "❌ System unhealthy - $FAILED_CHECKS failed checks"
        fi
        
        # Set outputs
        echo "status=$HEALTH_STATUS" >> $GITHUB_OUTPUT
        echo "response_time=$AVG_RESPONSE_TIME" >> $GITHUB_OUTPUT
        echo "issues=${#HEALTH_ISSUES[@]}" >> $GITHUB_OUTPUT
        
        echo "📊 Health Summary:"
        echo "  Status: $HEALTH_STATUS"
        echo "  Avg Response Time: ${AVG_RESPONSE_TIME}ms"
        echo "  Failed Checks: $FAILED_CHECKS/${#ENDPOINTS[@]}"

  # System metrics collection
  metrics-collection:
    name: Collect System Metrics
    runs-on: ubuntu-latest
    needs: health-check
    outputs:
      cpu-usage: ${{ steps.metrics.outputs.cpu_usage }}
      memory-usage: ${{ steps.metrics.outputs.memory_usage }}
      disk-usage: ${{ steps.metrics.outputs.disk_usage }}
      alerts-generated: ${{ steps.metrics.outputs.alerts_count }}
    
    steps:
    - name: Collect system metrics
      id: metrics
      run: |
        echo "📊 Collecting system metrics..."
        
        # Simulate system metrics collection
        CPU_USAGE=$(echo "scale=1; 20 + ($RANDOM % 50)" | bc)
        MEMORY_USAGE=$(echo "scale=1; 40 + ($RANDOM % 40)" | bc)
        DISK_USAGE=$(echo "scale=1; 30 + ($RANDOM % 50)" | bc)
        
        echo "Current System Metrics:"
        echo "  CPU Usage: ${CPU_USAGE}%"
        echo "  Memory Usage: ${MEMORY_USAGE}%"
        echo "  Disk Usage: ${DISK_USAGE}%"
        
        # Check for threshold violations
        ALERTS_COUNT=0
        ALERTS=()
        
        # CPU threshold check (>80%)
        if (( $(echo "$CPU_USAGE > 80" | bc -l) )); then
          ALERTS+=("High CPU usage detected: ${CPU_USAGE}%")
          ALERTS_COUNT=$((ALERTS_COUNT + 1))
        fi
        
        # Memory threshold check (>85%)
        if (( $(echo "$MEMORY_USAGE > 85" | bc -l) )); then
          ALERTS+=("High memory usage detected: ${MEMORY_USAGE}%")
          ALERTS_COUNT=$((ALERTS_COUNT + 1))
        fi
        
        # Disk threshold check (>90%)
        if (( $(echo "$DISK_USAGE > 90" | bc -l) )); then
          ALERTS+=("High disk usage detected: ${DISK_USAGE}%")
          ALERTS_COUNT=$((ALERTS_COUNT + 1))
        fi
        
        # Application-specific metrics
        RESPONSE_TIME="${{ needs.health-check.outputs.response-time }}"
        if (( $(echo "$RESPONSE_TIME > 1000" | bc -l) )); then
          ALERTS+=("High response time detected: ${RESPONSE_TIME}ms")
          ALERTS_COUNT=$((ALERTS_COUNT + 1))
        fi
        
        echo "🚨 Generated $ALERTS_COUNT alerts"
        for alert in "${ALERTS[@]}"; do
          echo "  - $alert"
        done
        
        # Set outputs
        echo "cpu_usage=$CPU_USAGE" >> $GITHUB_OUTPUT
        echo "memory_usage=$MEMORY_USAGE" >> $GITHUB_OUTPUT
        echo "disk_usage=$DISK_USAGE" >> $GITHUB_OUTPUT
        echo "alerts_count=$ALERTS_COUNT" >> $GITHUB_OUTPUT

  # Alert processing and notification
  alert-processing:
    name: Process Alerts and Notifications
    runs-on: ubuntu-latest
    needs: [health-check, metrics-collection]
    if: needs.metrics-collection.outputs.alerts-generated > 0 || needs.health-check.outputs.health-status != 'healthy'
    
    steps:
    - name: Process monitoring alerts
      run: |
        echo "🚨 Processing monitoring alerts..."
        
        HEALTH_STATUS="${{ needs.health-check.outputs.health-status }}"
        CPU_USAGE="${{ needs.metrics-collection.outputs.cpu-usage }}"
        MEMORY_USAGE="${{ needs.metrics-collection.outputs.memory-usage }}"
        DISK_USAGE="${{ needs.metrics-collection.outputs.disk-usage }}"
        RESPONSE_TIME="${{ needs.health-check.outputs.response-time }}"
        ALERTS_COUNT="${{ needs.metrics-collection.outputs.alerts-generated }}"
        
        echo "Alert Summary:"
        echo "  Health Status: $HEALTH_STATUS"
        echo "  CPU Usage: ${CPU_USAGE}%"
        echo "  Memory Usage: ${MEMORY_USAGE}%"
        echo "  Disk Usage: ${DISK_USAGE}%"
        echo "  Response Time: ${RESPONSE_TIME}ms"
        echo "  Alerts Generated: $ALERTS_COUNT"
        
        # Determine alert severity
        SEVERITY="medium"
        
        if [ "$HEALTH_STATUS" = "unhealthy" ] || (( $(echo "$CPU_USAGE > 90" | bc -l) )) || (( $(echo "$MEMORY_USAGE > 95" | bc -l) )); then
          SEVERITY="critical"
        elif [ "$HEALTH_STATUS" = "degraded" ] || (( $(echo "$CPU_USAGE > 80" | bc -l) )) || (( $(echo "$MEMORY_USAGE > 85" | bc -l) )); then
          SEVERITY="high"
        fi
        
        echo "Alert Severity: $SEVERITY"
        
        # Create alert payload
        cat > monitoring-alert.json << EOF
        {
          "timestamp": "$(date -u +"%Y-%m-%d %H:%M:%S UTC")",
          "severity": "$SEVERITY",
          "source": "system-monitoring",
          "title": "System Monitoring Alert",
          "description": "System health or performance thresholds exceeded",
          "metrics": {
            "health_status": "$HEALTH_STATUS",
            "cpu_usage": "$CPU_USAGE%",
            "memory_usage": "$MEMORY_USAGE%",
            "disk_usage": "$DISK_USAGE%",
            "response_time": "${RESPONSE_TIME}ms"
          },
          "alerts_count": $ALERTS_COUNT,
          "github_run_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        }
        EOF
        
        echo "Generated alert payload:"
        cat monitoring-alert.json | jq '.'
        
    - name: Send Slack notification
      if: env.SLACK_WEBHOOK_URL
      run: |
        echo "📱 Sending Slack notification..."
        
        HEALTH_STATUS="${{ needs.health-check.outputs.health-status }}"
        SEVERITY_EMOJI=""
        
        case "$HEALTH_STATUS" in
          "healthy") SEVERITY_EMOJI="✅" ;;
          "degraded") SEVERITY_EMOJI="⚠️" ;;
          "unhealthy") SEVERITY_EMOJI="❌" ;;
        esac
        
        # Mock Slack notification
        echo "$SEVERITY_EMOJI [MONITORING] System Status: $HEALTH_STATUS"
        echo "📊 CPU: ${{ needs.metrics-collection.outputs.cpu-usage }}% | Memory: ${{ needs.metrics-collection.outputs.memory-usage }}% | Disk: ${{ needs.metrics-collection.outputs.disk-usage }}%"
        echo "⏱️ Avg Response Time: ${{ needs.health-check.outputs.response-time }}ms"
        echo "🔗 View Details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        
    - name: Update monitoring dashboard
      run: |
        echo "📊 Updating monitoring dashboard..."
        
        # In production, this would update a monitoring dashboard or database
        echo "Updated dashboard with latest metrics and alert status"
        
        # Store metrics for trending
        cat > metrics-snapshot.json << EOF
        {
          "timestamp": "$(date -u +"%Y-%m-%d %H:%M:%S UTC")",
          "health_status": "${{ needs.health-check.outputs.health-status }}",
          "metrics": {
            "cpu_usage": ${{ needs.metrics-collection.outputs.cpu-usage }},
            "memory_usage": ${{ needs.metrics-collection.outputs.memory-usage }},
            "disk_usage": ${{ needs.metrics-collection.outputs.disk-usage }},
            "response_time": ${{ needs.health-check.outputs.response-time }}
          },
          "alerts_generated": ${{ needs.metrics-collection.outputs.alerts-generated }}
        }
        EOF
        
        echo "Metrics snapshot saved for historical analysis"

  # Generate monitoring report
  monitoring-report:
    name: Generate Monitoring Report
    runs-on: ubuntu-latest
    needs: [health-check, metrics-collection, alert-processing]
    if: always()
    
    steps:
    - name: Generate comprehensive monitoring report
      run: |
        echo "📋 Generating monitoring report..."
        
        REPORT_DATE=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        HEALTH_STATUS="${{ needs.health-check.outputs.health-status }}"
        
        cat > monitoring-report.md << EOF
        # 📊 System Monitoring Report
        
        **Generated:** $REPORT_DATE  
        **Triggered by:** Scheduled monitoring check  
        **Run ID:** ${{ github.run_id }}  
        
        ## 🏥 Health Status: **$HEALTH_STATUS**
        
        ### 📈 System Metrics
        
        | Metric | Value | Status |
        |--------|--------|--------|
        | CPU Usage | ${{ needs.metrics-collection.outputs.cpu-usage }}% | $([ $(echo "${{ needs.metrics-collection.outputs.cpu-usage }} > 80" | bc) -eq 1 ] && echo "⚠️ High" || echo "✅ Normal") |
        | Memory Usage | ${{ needs.metrics-collection.outputs.memory-usage }}% | $([ $(echo "${{ needs.metrics-collection.outputs.memory-usage }} > 85" | bc) -eq 1 ] && echo "⚠️ High" || echo "✅ Normal") |
        | Disk Usage | ${{ needs.metrics-collection.outputs.disk-usage }}% | $([ $(echo "${{ needs.metrics-collection.outputs.disk-usage }} > 90" | bc) -eq 1 ] && echo "⚠️ High" || echo "✅ Normal") |
        | Avg Response Time | ${{ needs.health-check.outputs.response-time }}ms | $([ $(echo "${{ needs.health-check.outputs.response-time }} > 1000" | bc) -eq 1 ] && echo "⚠️ Slow" || echo "✅ Good") |
        
        ### 🚨 Alert Summary
        
        - **Alerts Generated:** ${{ needs.metrics-collection.outputs.alerts-generated }}
        - **Health Issues:** ${{ needs.health-check.outputs.issues-detected }}
        
        ### 📊 Recommendations
        
        $(if [ "${{ needs.metrics-collection.outputs.alerts-generated }}" -gt 0 ]; then
          echo "- Review system resources and optimize performance"
          echo "- Consider scaling resources if high usage persists"
          echo "- Monitor trends for capacity planning"
        else
          echo "- System is operating within normal parameters"
          echo "- Continue regular monitoring schedule"
        fi)
        
        ### 🔗 Links
        
        - [GitHub Actions Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
        - [Monitoring Dashboard](http://localhost:3016)
        
        EOF
        
        echo "📄 Monitoring report generated:"
        cat monitoring-report.md
        
    - name: Archive monitoring artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: monitoring-report-$(date +%Y%m%d-%H%M)
        path: |
          monitoring-report.md
          monitoring-alert.json
          metrics-snapshot.json
        retention-days: 30