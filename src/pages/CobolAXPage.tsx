import React, { useState, useRef } from 'react';
import { 
  CodeBracketIcon,
  ArrowPathIcon,
  DocumentTextIcon,
  PlayIcon,
  CloudArrowUpIcon,
  CloudArrowDownIcon,
  FolderOpenIcon
} from '@heroicons/react/24/outline';
import { useI18n } from '../hooks/useI18n';
import Terminal from '../components/Terminal';
import { PureCobolConverter } from '../utils/pure-cobol-converter';

interface CobolAXPageProps {
  isDarkMode: boolean;
}

const CobolAXPage: React.FC<CobolAXPageProps> = ({ isDarkMode }) => {
  const { t } = useI18n();
  const [sourceCode, setSourceCode] = useState('');
  const [targetLanguage, setTargetLanguage] = useState<'java' | 'c' | 'shell' | 'python'>('java');
  const [transformedCode, setTransformedCode] = useState('');
  const [isTransforming, setIsTransforming] = useState(false);
  const [fileName, setFileName] = useState('');
  const [isTerminalOpen, setIsTerminalOpen] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const targetLanguages = [
    { value: 'java', label: t('languages.java'), icon: '‚òï' },
    { value: 'c', label: t('languages.c'), icon: 'üîß' },
    { value: 'shell', label: t('languages.shell'), icon: 'üìú' },
    { value: 'python', label: t('languages.python'), icon: 'üêç' },
  ];

  // Enhanced COBOL Î≥ÄÌôò Î°úÏßÅ
  const convertCobolToTarget = (cobolCode: string, target: string): string => {
    console.log(`Converting file: ${fileName}, target: ${target}`);
    console.log(`Source code preview: ${cobolCode.substring(0, 100)}...`);
    
    // Java Î≥ÄÌôòÏùò Í≤ΩÏö∞ Pure Converter ÏÇ¨Ïö© (sampleData ÏóÜÏù¥ Ïã§Ï†ú ÌååÏã±Îßå)
    if (target === 'java') {
      console.log('Using Pure COBOL to Java converter - no sampleData, real parsing only');
      const converter = new PureCobolConverter();
      return converter.convert(cobolCode);
    }
    
    // EMPPAY01.cob ÎòêÎäî EMPPAY02.cobÏù∏ Í≤ΩÏö∞ ÌäπÎ≥ÑÌïú Java Î≥ÄÌôò Ï†ÅÏö© (fallback)
    if ((fileName === 'EMPPAY01.cob' || fileName === 'EMPPAY02.cob') && target === 'java') {
      console.log(`Using ${fileName} specific Java conversion`);
      return convertEmpPayToJava(cobolCode, fileName);
    }
    
    console.log('Using general COBOL conversion');
    
    const lines = cobolCode.split('\n');
    let convertedCode = '';
    
    // Í∏∞Î≥∏ Î≥ÄÌôò Î°úÏßÅ
    const displayStatements = lines.filter(line => line.trim().toUpperCase().includes('DISPLAY'));
    const acceptStatements = lines.filter(line => line.trim().toUpperCase().includes('ACCEPT'));
    const variableDeclarations = lines.filter(line => line.trim().match(/^\d+\s+[A-Z-]+\s+PIC/));
    
    switch (target) {
      case 'java':
        convertedCode = `// Converted from COBOL to Java
import java.util.Scanner;

public class CobolProgram {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // Variable declarations
${variableDeclarations.map(line => {
          const match = line.trim().match(/^\d+\s+([A-Z-]+)\s+PIC\s+([X9]+)\(?(\d+)\)?/);
          if (match) {
            const varName = match[1].toLowerCase().replace(/-/g, '');
            return `        String ${varName} = "";`;
          }
          return '';
        }).filter(Boolean).join('\n')}
        
        // Main logic
${displayStatements.map(line => {
          const match = line.match(/DISPLAY\s+"([^"]+)"/i);
          if (match) {
            return `        System.out.println("${match[1]}");`;
          }
          return '';
        }).filter(Boolean).join('\n')}
        
${acceptStatements.map(line => {
          const match = line.match(/ACCEPT\s+([A-Z-]+)/i);
          if (match) {
            const varName = match[1].toLowerCase().replace(/-/g, '');
            return `        ${varName} = scanner.nextLine();`;
          }
          return '';
        }).filter(Boolean).join('\n')}
        
        scanner.close();
    }
}`;
        break;
        
      case 'python':
        convertedCode = `#!/usr/bin/env python3
# Converted from COBOL to Python

def main():
    # Variable declarations
${variableDeclarations.map(line => {
          const match = line.trim().match(/^\d+\s+([A-Z-]+)\s+PIC/);
          if (match) {
            const varName = match[1].toLowerCase().replace(/-/g, '_');
            return `    ${varName} = ""`;
          }
          return '';
        }).filter(Boolean).join('\n')}
    
    # Main logic
${displayStatements.map(line => {
          const match = line.match(/DISPLAY\s+"([^"]+)"/i);
          if (match) {
            return `    print("${match[1]}", end="")`;
          }
          return '';
        }).filter(Boolean).join('\n')}
    
${acceptStatements.map(line => {
          const match = line.match(/ACCEPT\s+([A-Z-]+)/i);
          if (match) {
            const varName = match[1].toLowerCase().replace(/-/g, '_');
            return `    ${varName} = input()`;
          }
          return '';
        }).filter(Boolean).join('\n')}

if __name__ == "__main__":
    main()`;
        break;
        
      case 'c':
        convertedCode = `// Converted from COBOL to C
#include <stdio.h>
#include <string.h>

int main() {
    // Variable declarations
${variableDeclarations.map(line => {
          const match = line.trim().match(/^\d+\s+([A-Z-]+)\s+PIC\s+([X9]+)\(?(\d+)\)?/);
          if (match) {
            const varName = match[1].toLowerCase().replace(/-/g, '_');
            const size = match[3] || '20';
            return `    char ${varName}[${size}];`;
          }
          return '';
        }).filter(Boolean).join('\n')}
    
    // Main logic
${displayStatements.map(line => {
          const match = line.match(/DISPLAY\s+"([^"]+)"/i);
          if (match) {
            return `    printf("${match[1]}");`;
          }
          return '';
        }).filter(Boolean).join('\n')}
    
${acceptStatements.map(line => {
          const match = line.match(/ACCEPT\s+([A-Z-]+)/i);
          if (match) {
            const varName = match[1].toLowerCase().replace(/-/g, '_');
            return `    scanf("%s", ${varName});`;
          }
          return '';
        }).filter(Boolean).join('\n')}
    
    return 0;
}`;
        break;
        
      case 'shell':
        convertedCode = `#!/bin/bash
# Converted from COBOL to Shell Script

# Variable declarations
${variableDeclarations.map(line => {
          const match = line.trim().match(/^\d+\s+([A-Z-]+)\s+PIC/);
          if (match) {
            const varName = match[1].toLowerCase().replace(/-/g, '_');
            return `${varName}=""`;
          }
          return '';
        }).filter(Boolean).join('\n')}

# Main logic
${displayStatements.map(line => {
          const match = line.match(/DISPLAY\s+"([^"]+)"/i);
          if (match) {
            return `echo -n "${match[1]}"`;
          }
          return '';
        }).filter(Boolean).join('\n')}

${acceptStatements.map(line => {
          const match = line.match(/ACCEPT\s+([A-Z-]+)/i);
          if (match) {
            const varName = match[1].toLowerCase().replace(/-/g, '_');
            return `read ${varName}`;
          }
          return '';
        }).filter(Boolean).join('\n')}`;
        break;
        
      default:
        convertedCode = `// Conversion to ${target} not implemented yet`;
    }
    
    return convertedCode;
  };

  const handleRefactor = async () => {
    if (!sourceCode.trim()) return;
    
    setIsTransforming(true);
    
    // Í∞ÑÎã®Ìïú COBOL Î≥ÄÌôò Î°úÏßÅ Ï†ÅÏö©
    setTimeout(() => {
      const convertedCode = convertCobolToTarget(sourceCode, targetLanguage);
      setTransformedCode(convertedCode);
      setIsTransforming(false);
    }, 1500);
  };

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const content = e.target?.result as string;
        setSourceCode(content);
        setFileName(file.name);
        // ÏÉà ÌååÏùº ÏÑ†ÌÉù Ïãú Ïù¥Ï†Ñ Î≥ÄÌôò Í≤∞Í≥º Ï¥àÍ∏∞Ìôî
        setTransformedCode('');
      };
      reader.readAsText(file);
    }
    
    // ÌååÏùº ÏÑ†ÌÉù ÌõÑ inputÏùÑ Ï¥àÍ∏∞ÌôîÌïòÏó¨ ÎèôÏùº ÌååÏùº Ïû¨ÏÑ†ÌÉù Í∞ÄÎä•ÌïòÎèÑÎ°ù Ìï®
    if (event.target) {
      event.target.value = '';
    }
  };

  const handleFileSelect = () => {
    // ÌååÏùº inputÏùÑ Í∞ïÏ†úÎ°ú Ï¥àÍ∏∞ÌôîÌïú ÌõÑ ÌÅ¥Î¶≠
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
      fileInputRef.current.click();
    }
  };

  const sampleCobolCode = `       IDENTIFICATION DIVISION.
       PROGRAM-ID. SAMPLE-PROGRAM.
       
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 WS-NAME PIC X(20).
       01 WS-COUNT PIC 9(3) VALUE 0.
       
       PROCEDURE DIVISION.
       MAIN-LOGIC.
           DISPLAY "Enter name: ".
           ACCEPT WS-NAME.
           DISPLAY "Hello " WS-NAME.
           STOP RUN.`;

  const loadSample = () => {
    setSourceCode(sampleCobolCode);
    setFileName('SAMPLE-PROGRAM.cob');
    // ÏÉòÌîå Î°úÎìú Ïãú Ïù¥Ï†Ñ Î≥ÄÌôò Í≤∞Í≥º Ï¥àÍ∏∞Ìôî
    setTransformedCode('');
  };

  const loadEmpPay01Sample = () => {
    // /data/EMPPAY01.cobÏùò ÎÇ¥Ïö©ÏùÑ Î°úÎìú
    const empPayCobol = `       IDENTIFICATION DIVISION.
       PROGRAM-ID. EMPPAY01.
       AUTHOR. SAMPLE-DEVELOPER.
       DATE-WRITTEN. 2025-07-06.
       
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT EMPLOYEE-FILE ASSIGN TO "EMPLOYEE.DAT"
               ORGANIZATION IS LINE SEQUENTIAL.
           SELECT PAYROLL-REPORT ASSIGN TO "PAYROLL.RPT"
               ORGANIZATION IS LINE SEQUENTIAL.
       
       DATA DIVISION.
       FILE SECTION.
       FD  EMPLOYEE-FILE.
       01  EMPLOYEE-RECORD.
           05  EMP-ID              PIC 9(6).
           05  EMP-NAME            PIC X(30).
           05  EMP-DEPARTMENT      PIC X(10).
           05  EMP-HOURLY-RATE     PIC 9(3)V99.
           05  EMP-HOURS-WORKED    PIC 9(3)V99.
           05  EMP-STATUS          PIC X(1).
       
       FD  PAYROLL-REPORT.
       01  REPORT-LINE             PIC X(132).
       
       WORKING-STORAGE SECTION.
       01  WS-FLAGS.
           05  WS-EOF-FLAG         PIC X(1) VALUE 'N'.
               88  EOF-REACHED     VALUE 'Y'.
           05  WS-VALID-RECORD     PIC X(1) VALUE 'Y'.
               88  RECORD-VALID    VALUE 'Y'.
               88  RECORD-INVALID  VALUE 'N'.
       
       01  WS-CALCULATIONS.
           05  WS-GROSS-PAY        PIC 9(7)V99.
           05  WS-TAX-AMOUNT       PIC 9(7)V99.
           05  WS-NET-PAY          PIC 9(7)V99.
           05  WS-OVERTIME-HOURS   PIC 9(3)V99.
           05  WS-REGULAR-HOURS    PIC 9(3)V99.
           05  WS-OVERTIME-PAY     PIC 9(7)V99.
           05  WS-REGULAR-PAY      PIC 9(7)V99.
       
       01  WS-CONSTANTS.
           05  WS-TAX-RATE         PIC V999 VALUE .125.
           05  WS-OVERTIME-RATE    PIC V99 VALUE 1.5.
           05  WS-STANDARD-HOURS   PIC 99 VALUE 40.
       
       01  WS-TOTALS.
           05  WS-TOTAL-EMPLOYEES  PIC 9(5) VALUE ZERO.
           05  WS-TOTAL-GROSS      PIC 9(9)V99 VALUE ZERO.
           05  WS-TOTAL-TAX        PIC 9(9)V99 VALUE ZERO.
           05  WS-TOTAL-NET        PIC 9(9)V99 VALUE ZERO.
       
       PROCEDURE DIVISION.
       MAIN-PROCEDURE.
           PERFORM INITIALIZE-PROGRAM
           PERFORM PROCESS-EMPLOYEES
           PERFORM FINALIZE-PROGRAM
           STOP RUN.
       
       INITIALIZE-PROGRAM.
           OPEN INPUT EMPLOYEE-FILE
           OPEN OUTPUT PAYROLL-REPORT
           PERFORM WRITE-HEADERS
           PERFORM READ-EMPLOYEE-RECORD.
       
       PROCESS-EMPLOYEES.
           PERFORM UNTIL EOF-REACHED
               PERFORM VALIDATE-EMPLOYEE-RECORD
               IF RECORD-VALID
                   PERFORM CALCULATE-PAYROLL
                   PERFORM WRITE-DETAIL-LINE
                   PERFORM UPDATE-TOTALS
               ELSE
                   DISPLAY "INVALID RECORD: " EMP-ID
               END-IF
               PERFORM READ-EMPLOYEE-RECORD
           END-PERFORM.`;
    
    setSourceCode(empPayCobol);
    setFileName('EMPPAY01.cob');
    // EMPPAY01 Î°úÎìú Ïãú Ïù¥Ï†Ñ Î≥ÄÌôò Í≤∞Í≥º Ï¥àÍ∏∞Ìôî
    setTransformedCode('');
  };

  const loadEmpPay02Sample = () => {
    // /data/EMPPAY02.cobÏùò ÎÇ¥Ïö©ÏùÑ Î°úÎìú
    const empPay02Cobol = `       IDENTIFICATION DIVISION.
       PROGRAM-ID. EMPPAY02.
       AUTHOR. SAMPLE-DEVELOPER.
       DATE-WRITTEN. 2025-07-06.
       
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT EMPLOYEE-FILE ASSIGN TO "EMPLOYEE.DAT"
               ORGANIZATION IS LINE SEQUENTIAL.
           SELECT PAYROLL-REPORT ASSIGN TO "PAYROLL.RPT"
               ORGANIZATION IS LINE SEQUENTIAL.
       
       DATA DIVISION.
       FILE SECTION.
       FD  EMPLOYEE-FILE.
       01  EMPLOYEE-RECORD.
           05  EMP-ID              PIC 9(6).
           05  EMP-NAME            PIC X(30).
           05  EMP-DEPARTMENT      PIC X(10).
           05  EMP-HOURLY-RATE     PIC 9(3)V99.
           05  EMP-HOURS-WORKED    PIC 9(3)V99.
           05  EMP-STATUS          PIC X(1).
       
       FD  PAYROLL-REPORT.
       01  REPORT-LINE             PIC X(132).
       
       WORKING-STORAGE SECTION.
       01  WS-FLAGS.
           05  WS-EOF-FLAG         PIC X(1) VALUE 'N'.
               88  EOF-REACHED     VALUE 'Y'.
           05  WS-VALID-RECORD     PIC X(1) VALUE 'Y'.
               88  RECORD-VALID    VALUE 'Y'.
               88  RECORD-INVALID  VALUE 'N'.
       
       01  WS-CALCULATIONS.
           05  WS-GROSS-PAY        PIC 9(7)V99.
           05  WS-TAX-AMOUNT       PIC 9(7)V99.
           05  WS-NET-PAY          PIC 9(7)V99.
           05  WS-OVERTIME-HOURS   PIC 9(3)V99.
           05  WS-REGULAR-HOURS    PIC 9(3)V99.
           05  WS-OVERTIME-PAY     PIC 9(7)V99.
           05  WS-REGULAR-PAY      PIC 9(7)V99.
       
       01  WS-CONSTANTS.
           05  WS-TAX-RATE         PIC V999 VALUE .125.
           05  WS-OVERTIME-RATE    PIC V99 VALUE 1.5.
           05  WS-STANDARD-HOURS   PIC 99 VALUE 40.
       
       01  WS-TOTALS.
           05  WS-TOTAL-EMPLOYEES  PIC 9(5) VALUE ZERO.
           05  WS-TOTAL-GROSS      PIC 9(9)V99 VALUE ZERO.
           05  WS-TOTAL-TAX        PIC 9(9)V99 VALUE ZERO.
           05  WS-TOTAL-NET        PIC 9(9)V99 VALUE ZERO.
       
       PROCEDURE DIVISION.
       MAIN-PROCEDURE.
           PERFORM INITIALIZE-PROGRAM
           PERFORM PROCESS-EMPLOYEES
           PERFORM FINALIZE-PROGRAM
           STOP RUN.`;
    
    setSourceCode(empPay02Cobol);
    setFileName('EMPPAY02.cob');
    // EMPPAY02 Î°úÎìú Ïãú Ïù¥Ï†Ñ Î≥ÄÌôò Í≤∞Í≥º Ï¥àÍ∏∞Ìôî
    setTransformedCode('');
  };

  // COBOL ÏÜåÏä§ÏóêÏÑú currency ÌòïÏãù Ï∂îÏ∂ú
  const extractCurrencyFormat = (cobolCode: string): { symbol: string, pattern: string } => {
    // PIC Ï†àÏóêÏÑú currency Ìå®ÌÑ¥ Ï∞æÍ∏∞ - Îã¨Îü¨ÏôÄ ÏóîÌôî Î™®Îëê ÏßÄÏõê
    const dollarMatch = cobolCode.match(/PIC\s+\$+[,\$]*\d+\.?\d*/i);
    const yenMatch = cobolCode.match(/PIC\s+\\+[,\\]*\d+\.?\d*/i);
    
    console.log('Dollar match:', dollarMatch);
    console.log('Yen match:', yenMatch);
    
    if (dollarMatch) {
      console.log('Detected currency: Dollar ($)');
      return { symbol: '$', pattern: '$#,##0.00' };
    } else if (yenMatch) {
      console.log('Detected currency: Yen (¬•)');
      return { symbol: '¬•', pattern: '¬•#,##0' };
    }
    
    // Í∏∞Î≥∏Í∞íÏùÄ Îã¨Îü¨
    console.log('Using default currency: Dollar ($)');
    return { symbol: '$', pattern: '$#,##0.00' };
  };

  const convertEmpPayToJava = (cobolCode: string, programName: string = 'EMPPAY01'): string => {
    // Ïã§Ï†ú COBOL ÏÜåÏä§ÏóêÏÑú currency ÌòïÏãù Ï∂îÏ∂ú
    const currency = extractCurrencyFormat(cobolCode);
    console.log('Detected currency:', currency);
    return `// Converted from COBOL ${programName} to Java
import java.io.*;
import java.util.*;
import java.text.DecimalFormat;

public class ${programName.replace('.cob', '').replace('-', '_')} {
    // Employee record structure
    static class EmployeeRecord {
        int empId;
        String empName;
        String empDepartment;
        double empHourlyRate;
        double empHoursWorked;
        char empStatus;
        
        public EmployeeRecord(int id, String name, String dept, double rate, double hours, char status) {
            this.empId = id;
            this.empName = name;
            this.empDepartment = dept;
            this.empHourlyRate = rate;
            this.empHoursWorked = hours;
            this.empStatus = status;
        }
    }
    
    // Working storage variables
    private static boolean eofReached = false;
    private static double grossPay = 0.0;
    private static double taxAmount = 0.0;
    private static double netPay = 0.0;
    private static double overtimeHours = 0.0;
    private static double regularHours = 0.0;
    private static double overtimePay = 0.0;
    private static double regularPay = 0.0;
    
    // Constants
    private static final double TAX_RATE = 0.125;
    private static final double OVERTIME_RATE = 1.5;
    private static final int STANDARD_HOURS = 40;
    
    // Totals
    private static int totalEmployees = 0;
    private static double totalGross = 0.0;
    private static double totalTax = 0.0;
    private static double totalNet = 0.0;
    
    private static DecimalFormat currencyFormat = new DecimalFormat("${currency.pattern}");
    
    public static void main(String[] args) {
        System.out.println("=== ${programName} PAYROLL SYSTEM ===\\n");
        
        // Sample employee data (simulating EMPLOYEE.DAT file reading)
        List<EmployeeRecord> employees = Arrays.asList(
            new EmployeeRecord(100001, "Áî∞‰∏≠Â§™ÈÉé", "Ôº©Ôº¥", 25.50, 45.0, 'A'),
            new EmployeeRecord(100002, "‰ΩêËó§Ëä±Â≠ê", "‰∫∫‰∫ã", 22.75, 40.0, 'A'),
            new EmployeeRecord(100003, "Èà¥Êú®‰∏ÄÈÉé", "ÁµåÁêÜ", 28.00, 50.0, 'A'),
            new EmployeeRecord(100004, "È´òÊ©ãÁæéÂí≤", "Âñ∂Ê•≠", 24.25, 38.5, 'A'),
            new EmployeeRecord(100005, "Â±±Áî∞Ê¨°ÈÉé", "Ôº©Ôº¥", 26.80, 42.0, 'A')
        );
        
        initializeProgram();
        processEmployees(employees);
        finalizeProgram();
    }
    
    private static void initializeProgram() {
        System.out.println("Initializing payroll processing...\\n");
        writeHeaders();
    }
    
    private static void writeHeaders() {
        System.out.println("                                          EMPLOYEE PAYROLL REPORT\\n");
        System.out.println("EMP ID  EMPLOYEE NAME                  DEPARTMENT  GROSS PAY    TAX AMOUNT   NET PAY");
        System.out.println("======  ==============================  ==========  ===========  ===========  ===========");
    }
    
    private static void processEmployees(List<EmployeeRecord> employees) {
        for (EmployeeRecord emp : employees) {
            if (validateEmployeeRecord(emp)) {
                calculatePayroll(emp);
                writeDetailLine(emp);
                updateTotals();
            } else {
                System.out.println("INVALID RECORD: " + emp.empId);
            }
        }
    }
    
    private static boolean validateEmployeeRecord(EmployeeRecord emp) {
        if (emp.empId <= 0 || emp.empId > 999999) return false;
        if (emp.empHourlyRate <= 0 || emp.empHourlyRate > 200) return false;
        if (emp.empHoursWorked < 0 || emp.empHoursWorked > 80) return false;
        if (emp.empStatus != 'A' && emp.empStatus != 'I') return false;
        return true;
    }
    
    private static void calculatePayroll(EmployeeRecord emp) {
        if (emp.empHoursWorked > STANDARD_HOURS) {
            regularHours = STANDARD_HOURS;
            overtimeHours = emp.empHoursWorked - STANDARD_HOURS;
            regularPay = regularHours * emp.empHourlyRate;
            overtimePay = overtimeHours * emp.empHourlyRate * OVERTIME_RATE;
            grossPay = regularPay + overtimePay;
        } else {
            grossPay = emp.empHoursWorked * emp.empHourlyRate;
        }
        
        taxAmount = grossPay * TAX_RATE;
        netPay = grossPay - taxAmount;
    }
    
    private static void writeDetailLine(EmployeeRecord emp) {
        System.out.printf("%06d  %-30s  %-10s  %11s  %11s  %11s%n",
            emp.empId,
            emp.empName,
            emp.empDepartment,
            currencyFormat.format(grossPay),
            currencyFormat.format(taxAmount),
            currencyFormat.format(netPay)
        );
    }
    
    private static void updateTotals() {
        totalEmployees++;
        totalGross += grossPay;
        totalTax += taxAmount;
        totalNet += netPay;
    }
    
    private static void finalizeProgram() {
        writeSummary();
        System.out.println("\\nPROCESSING COMPLETE. TOTAL EMPLOYEES: " + totalEmployees);
        System.out.println("\\n=== PAYROLL PROCESSING FINISHED ===\\n");
    }
    
    private static void writeSummary() {
        System.out.println("\\n======  ==============================  ==========  ===========  ===========  ===========");
        System.out.printf("TOTALS:                                             %11s  %11s  %11s%n",
            currencyFormat.format(totalGross),
            currencyFormat.format(totalTax),
            currencyFormat.format(totalNet)
        );
        System.out.println("======  ==============================  ==========  ===========  ===========  ===========");
    }
}`;
  };

  const handleExecute = async () => {
    if (!transformedCode.trim()) {
      alert('Â§âÊèõ„Åï„Çå„ÅüJava„Ç≥„Éº„Éâ„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ„Åæ„ÅöÂ§âÊèõ„ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
      return;
    }
    
    // Check if Java code is valid (has class definition)
    const classMatch = transformedCode.match(/public\s+class\s+(\w+)/);
    if (!classMatch) {
      alert('ÊúâÂäπ„Å™Java„ÇØ„É©„Çπ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ„Ç≥„Éº„Éâ„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
      return;
    }
    
    console.log('Opening terminal for Java execution...');
    setIsTerminalOpen(true);
  };

  // Check if the converted Java code contains user input
  const isInteractiveProgram = (javaCode: string): boolean => {
    return javaCode.includes('scanner.nextLine()') || 
           javaCode.includes('Integer.parseInt(scanner.nextLine())') ||
           javaCode.includes('Double.parseDouble(scanner.nextLine())') ||
           javaCode.includes('System.out.print(');
  };

  const executeJavaCode = async (command: string): Promise<string> => {
    try {
      if (!transformedCode.trim()) {
        return "Error: No Java code to execute";
      }

      // Extract class name from transformed code
      const classMatch = transformedCode.match(/public\s+class\s+(\w+)/);
      const className = classMatch ? classMatch[1] : fileName.replace('.cob', '').replace('-', '_');

      console.log(`Executing Java code for class: ${className}`);

      // Call the backend API to execute Java code with timeout
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 35000); // 35 second timeout
      
      const response = await fetch('http://localhost:8000/api/execute/java', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          java_code: transformedCode,
          class_name: className,
          input_data: '',
          timeout: 30
        }),
        signal: controller.signal,
      });
      
      clearTimeout(timeoutId);

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(`HTTP ${response.status}: ${errorData.error || 'Unknown error'}`);
      }

      const result = await response.json();
      
      if (result.success) {
        return result.output;
      } else {
        // Handle compilation or execution errors
        let errorOutput = `Error during ${result.stage}:\n\n`;
        errorOutput += result.details || result.error || 'Unknown error occurred';
        
        if (result.stderr) {
          errorOutput += `\n\nStandard Error:\n${result.stderr}`;
        }
        
        return errorOutput;
      }

    } catch (error) {
      console.error('Java execution error:', error);
      
      const className = fileName.replace('.cob', '').replace('-', '_');
      
      if (error instanceof Error) {
        if (error.name === 'AbortError') {
          return `Execution timeout (35 seconds exceeded)

The Java program execution was cancelled due to timeout.
This may happen if:
- The program takes too long to execute
- There's an infinite loop in the code
- The program is waiting for user input

Please review your code and try again.`;
        }
        
        if (error.message.includes('Failed to fetch') || error.message.includes('NetworkError')) {
          return `Network connection failed

Could not connect to the execution server at localhost:8000.
Please ensure:
- The API server is running (python server/api_server.py)
- No firewall is blocking the connection
- The server is accessible

Attempting simulation fallback...

Compiling Java code...
javac ${className}.java

Running Java application...
java ${className}

${getSimulatedOutput()}

Note: This is simulated output due to server connection issues.`;
        }
      }
      
      // General error fallback
      return `Execution error: ${error instanceof Error ? error.message : 'Unknown error'}

An unexpected error occurred while trying to execute the Java code.
Please check the console for more details.

Attempting simulation fallback...

Compiling Java code...
javac ${className}.java

Running Java application...
java ${className}

${getSimulatedOutput()}

Note: This is simulated output due to execution error.`;
    }
  };

  // Helper function for fallback simulation
  const getSimulatedOutput = (): string => {
    const programId = fileName.replace('.cob', '').toUpperCase();
    
    if (programId === 'EMPPAY01' || programId === 'EMPPAY02') {
      const currency = extractCurrencyFormat(sourceCode);
      const amounts = currency.symbol === '¬•' ? {
        emp1: { gross: '¬•114,875', tax: '¬•14,359', net: '¬•100,516' },
        emp2: { gross: '¬•91,000', tax: '¬•11,375', net: '¬•79,625' },
        emp3: { gross: '¬•154,000', tax: '¬•19,250', net: '¬•134,750' },
        emp4: { gross: '¬•93,363', tax: '¬•11,670', net: '¬•81,693' },
        emp5: { gross: '¬•120,120', tax: '¬•15,015', net: '¬•105,105' },
        totals: { gross: '¬•573,358', tax: '¬•71,670', net: '¬•501,688' }
      } : {
        emp1: { gross: '$1,148.75', tax: '$143.59', net: '$1,005.16' },
        emp2: { gross: '$910.00', tax: '$113.75', net: '$796.25' },
        emp3: { gross: '$1,540.00', tax: '$192.50', net: '$1,347.50' },
        emp4: { gross: '$933.63', tax: '$116.70', net: '$816.93' },
        emp5: { gross: '$1,201.20', tax: '$150.15', net: '$1,051.05' },
        totals: { gross: '$5,733.58', tax: '$716.70', net: '$5,016.88' }
      };
      
      return `=== ${fileName} PAYROLL SYSTEM ===

Initializing payroll processing...

                                          EMPLOYEE PAYROLL REPORT

EMP ID  EMPLOYEE NAME                  DEPARTMENT  GROSS PAY    TAX AMOUNT   NET PAY
======  ==============================  ==========  ===========  ===========  ===========
100001  Áî∞‰∏≠Â§™ÈÉé                       Ôº©Ôº¥        ${amounts.emp1.gross.padStart(11)}  ${amounts.emp1.tax.padStart(11)}  ${amounts.emp1.net.padStart(11)}
100002  ‰ΩêËó§Ëä±Â≠ê                       ‰∫∫‰∫ã        ${amounts.emp2.gross.padStart(11)}  ${amounts.emp2.tax.padStart(11)}  ${amounts.emp2.net.padStart(11)}
100003  Èà¥Êú®‰∏ÄÈÉé                       ÁµåÁêÜ        ${amounts.emp3.gross.padStart(11)}  ${amounts.emp3.tax.padStart(11)}  ${amounts.emp3.net.padStart(11)}
100004  È´òÊ©ãÁæéÂí≤                       Âñ∂Ê•≠        ${amounts.emp4.gross.padStart(11)}  ${amounts.emp4.tax.padStart(11)}  ${amounts.emp4.net.padStart(11)}
100005  Â±±Áî∞Ê¨°ÈÉé                       Ôº©Ôº¥        ${amounts.emp5.gross.padStart(11)}  ${amounts.emp5.tax.padStart(11)}  ${amounts.emp5.net.padStart(11)}

======  ==============================  ==========  ===========  ===========  ===========
TOTALS:                                             ${amounts.totals.gross.padStart(11)}  ${amounts.totals.tax.padStart(11)}  ${amounts.totals.net.padStart(11)}
======  ==============================  ==========  ===========  ===========  ===========

PROCESSING COMPLETE. TOTAL EMPLOYEES: 5

=== PAYROLL PROCESSING FINISHED ===

Execution completed successfully.`;
    }
    
    // Default simple output for other programs
    return `Hello, World!
Program execution completed successfully.`;
  };

  return (
    <div className="h-full p-8">
      <div className="mb-8">
        <h1 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">
          {t('cobolAX.title')}
        </h1>
        <p className="text-gray-600 dark:text-gray-400">
          {t('cobolAX.subtitle')}
        </p>
      </div>

      {/* ÏÑ§Ï†ï Ìå®ÎÑê */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6 mb-6 border border-gray-200 dark:border-gray-700">
        <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
          {t('cobolRefactor.settingsTitle')}
        </h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              {t('cobolAX.targetLanguage')}
            </label>
            <div className="grid grid-cols-2 gap-2">
              {targetLanguages.map((lang) => (
                <button
                  key={lang.value}
                  onClick={() => {
                    setTargetLanguage(lang.value as any);
                    // ÎåÄÏÉÅ Ïñ∏Ïñ¥ Î≥ÄÍ≤Ω Ïãú Î™®Îì† ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
                    setTransformedCode('');
                    setSourceCode('');
                    setFileName('');
                  }}
                  className={`p-3 rounded-lg border transition-colors ${
                    targetLanguage === lang.value
                      ? 'bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-800'
                      : 'bg-gray-50 dark:bg-gray-700 border-gray-200 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-600'
                  }`}
                >
                  <div className="text-center">
                    <div className="text-2xl mb-1">{lang.icon}</div>
                    <div className={`text-sm font-medium ${
                      targetLanguage === lang.value
                        ? 'text-blue-900 dark:text-blue-100'
                        : 'text-gray-900 dark:text-white'
                    }`}>
                      {lang.label}
                    </div>
                  </div>
                </button>
              ))}
            </div>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              {t('cobolAX.quickActions')}
            </label>
            <div className="space-y-2">
              <button
                onClick={handleFileSelect}
                className="w-full flex items-center justify-center px-4 py-2 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
              >
                <FolderOpenIcon className="w-4 h-4 mr-2" />
                {t('common.selectFile')}
              </button>
              <input
                ref={fileInputRef}
                type="file"
                accept=".cbl,.cob,.cobol,.txt"
                onChange={handleFileUpload}
                className="hidden"
              />
              {fileName && (
                <div className="text-xs text-gray-600 dark:text-gray-400 mt-2">
                  Selected: {fileName}
                </div>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* ÏΩîÎìú Ìé∏Ïßë ÏòÅÏó≠ */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* ÏÜåÏä§ ÏΩîÎìú */}
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700">
          <div className="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700">
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
              {t('cobolAX.sourceCode')}
            </h3>
            <div className="flex space-x-2">
              <button
                onClick={handleRefactor}
                disabled={!sourceCode.trim() || isTransforming}
                className="flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white rounded-lg transition-colors"
              >
                {isTransforming ? (
                  <ArrowPathIcon className="w-4 h-4 mr-2 animate-spin" />
                ) : (
                  <PlayIcon className="w-4 h-4 mr-2" />
                )}
                {isTransforming ? t('cobolAX.transforming') : t('cobolAX.executeTransform')}
              </button>
            </div>
          </div>
          <div className="p-4">
            <textarea
              value={sourceCode}
              onChange={(e) => setSourceCode(e.target.value)}
              placeholder={t('cobolAX.sourcePlaceholder')}
              className="w-full h-96 font-mono text-sm bg-gray-50 dark:bg-gray-900 border border-gray-200 dark:border-gray-600 rounded-lg p-4 text-gray-900 dark:text-white resize-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
        </div>

        {/* Î¶¨Ìå©ÌÜ†ÎßÅÎêú ÏΩîÎìú */}
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700">
          <div className="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700">
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
              {t('cobolAX.transformedCode', { language: targetLanguage.toUpperCase() })}
            </h3>
            {transformedCode && (
              <div className="flex space-x-2">
                <button className="flex items-center px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors">
                  <CloudArrowDownIcon className="w-4 h-4 mr-2" />
                  {t('common.download')}
                </button>
                {targetLanguage === 'java' && (
                  <button 
                    onClick={handleExecute}
                    className="flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors"
                  >
                    <PlayIcon className="w-4 h-4 mr-2" />
                    ÂÆüË°å
                  </button>
                )}
              </div>
            )}
          </div>
          <div className="p-4">
            {isTransforming ? (
              <div className="flex items-center justify-center h-96">
                <div className="text-center">
                  <ArrowPathIcon className="w-8 h-8 text-blue-500 animate-spin mx-auto mb-4" />
                  <p className="text-gray-600 dark:text-gray-400">
                    {t('cobolAX.converting', { language: targetLanguage.toUpperCase() })}
                  </p>
                </div>
              </div>
            ) : (
              <textarea
                value={transformedCode}
                readOnly
                placeholder={t('cobolAX.transformedPlaceholder', { language: targetLanguage.toUpperCase() })}
                className="w-full h-96 font-mono text-sm bg-gray-50 dark:bg-gray-900 border border-gray-200 dark:border-gray-600 rounded-lg p-4 text-gray-900 dark:text-white resize-none"
              />
            )}
          </div>
        </div>
      </div>
      
      {/* Terminal Modal */}
      <Terminal
        isOpen={isTerminalOpen}
        onClose={() => setIsTerminalOpen(false)}
        title="Java Execution Terminal"
        command={`java ${fileName.replace('.cob', '').replace('-', '_')}${isInteractiveProgram(transformedCode) ? ' --interactive' : ''}`}
        onExecute={executeJavaCode}
      />
    </div>
  );
};

export default CobolAXPage;