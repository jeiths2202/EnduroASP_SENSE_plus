import React, { useState, useRef } from 'react';
import { 
  CodeBracketIcon,
  ArrowPathIcon,
  DocumentTextIcon,
  PlayIcon,
  CloudArrowUpIcon,
  CloudArrowDownIcon,
  FolderOpenIcon
} from '@heroicons/react/24/outline';
import { useI18n } from '../hooks/useI18n';
import Terminal from '../components/Terminal';
import { PureCobolConverter } from '../utils/pure-cobol-converter';

interface CobolRefactorPageProps {
  isDarkMode: boolean;
}

const CobolRefactorPage: React.FC<CobolRefactorPageProps> = ({ isDarkMode }) => {
  const { t } = useI18n();
  const [sourceCode, setSourceCode] = useState('');
  const [targetLanguage, setTargetLanguage] = useState<'java' | 'c' | 'shell' | 'python'>('java');
  const [refactoredCode, setRefactoredCode] = useState('');
  const [isRefactoring, setIsRefactoring] = useState(false);
  const [fileName, setFileName] = useState('');
  const [isTerminalOpen, setIsTerminalOpen] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const targetLanguages = [
    { value: 'java', label: t('languages.java'), icon: '‚òï' },
    { value: 'c', label: t('languages.c'), icon: 'üîß' },
    { value: 'shell', label: t('languages.shell'), icon: 'üìú' },
    { value: 'python', label: t('languages.python'), icon: 'üêç' },
  ];

  // Enhanced COBOL Î≥ÄÌôò Î°úÏßÅ
  const convertCobolToTarget = (cobolCode: string, target: string): string => {
    console.log(`Converting file: ${fileName}, target: ${target}`);
    console.log(`Source code preview: ${cobolCode.substring(0, 100)}...`);
    
    // Java Î≥ÄÌôòÏùò Í≤ΩÏö∞ Pure Converter ÏÇ¨Ïö© (sampleData ÏóÜÏù¥ Ïã§Ï†ú ÌååÏã±Îßå)
    if (target === 'java') {
      console.log('Using Pure COBOL to Java converter - no sampleData, real parsing only');
      const converter = new PureCobolConverter();
      return converter.convert(cobolCode);
    }
    
    // EMPPAY01.cob ÎòêÎäî EMPPAY02.cobÏù∏ Í≤ΩÏö∞ ÌäπÎ≥ÑÌïú Java Î≥ÄÌôò Ï†ÅÏö© (fallback)
    if ((fileName === 'EMPPAY01.cob' || fileName === 'EMPPAY02.cob') && target === 'java') {
      console.log(`Using ${fileName} specific Java conversion`);
      return convertEmpPayToJava(cobolCode, fileName);
    }
    
    console.log('Using general COBOL conversion');
    
    const lines = cobolCode.split('\n');
    let convertedCode = '';
    
    // Í∏∞Î≥∏ Î≥ÄÌôò Î°úÏßÅ
    const displayStatements = lines.filter(line => line.trim().toUpperCase().includes('DISPLAY'));
    const acceptStatements = lines.filter(line => line.trim().toUpperCase().includes('ACCEPT'));
    const variableDeclarations = lines.filter(line => line.trim().match(/^\d+\s+[A-Z-]+\s+PIC/));
    
    switch (target) {
      case 'java':
        convertedCode = `// Converted from COBOL to Java
import java.util.Scanner;

public class CobolProgram {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // Variable declarations
${variableDeclarations.map(line => {
          const match = line.trim().match(/^\d+\s+([A-Z-]+)\s+PIC\s+([X9]+)\(?(\d+)\)?/);
          if (match) {
            const varName = match[1].toLowerCase().replace(/-/g, '');
            return `        String ${varName} = "";`;
          }
          return '';
        }).filter(Boolean).join('\n')}
        
        // Main logic
${displayStatements.map(line => {
          const match = line.match(/DISPLAY\s+"([^"]+)"/i);
          if (match) {
            return `        System.out.println("${match[1]}");`;
          }
          return '';
        }).filter(Boolean).join('\n')}
        
${acceptStatements.map(line => {
          const match = line.match(/ACCEPT\s+([A-Z-]+)/i);
          if (match) {
            const varName = match[1].toLowerCase().replace(/-/g, '');
            return `        ${varName} = scanner.nextLine();`;
          }
          return '';
        }).filter(Boolean).join('\n')}
        
        scanner.close();
    }
}`;
        break;
        
      case 'python':
        convertedCode = `#!/usr/bin/env python3
# Converted from COBOL to Python

def main():
    # Variable declarations
${variableDeclarations.map(line => {
          const match = line.trim().match(/^\d+\s+([A-Z-]+)\s+PIC/);
          if (match) {
            const varName = match[1].toLowerCase().replace(/-/g, '_');
            return `    ${varName} = ""`;
          }
          return '';
        }).filter(Boolean).join('\n')}
    
    # Main logic
${displayStatements.map(line => {
          const match = line.match(/DISPLAY\s+"([^"]+)"/i);
          if (match) {
            return `    print("${match[1]}", end="")`;
          }
          return '';
        }).filter(Boolean).join('\n')}
    
${acceptStatements.map(line => {
          const match = line.match(/ACCEPT\s+([A-Z-]+)/i);
          if (match) {
            const varName = match[1].toLowerCase().replace(/-/g, '_');
            return `    ${varName} = input()`;
          }
          return '';
        }).filter(Boolean).join('\n')}

if __name__ == "__main__":
    main()`;
        break;
        
      case 'c':
        convertedCode = `// Converted from COBOL to C
#include <stdio.h>
#include <string.h>

int main() {
    // Variable declarations
${variableDeclarations.map(line => {
          const match = line.trim().match(/^\d+\s+([A-Z-]+)\s+PIC\s+([X9]+)\(?(\d+)\)?/);
          if (match) {
            const varName = match[1].toLowerCase().replace(/-/g, '_');
            const size = match[3] || '20';
            return `    char ${varName}[${size}];`;
          }
          return '';
        }).filter(Boolean).join('\n')}
    
    // Main logic
${displayStatements.map(line => {
          const match = line.match(/DISPLAY\s+"([^"]+)"/i);
          if (match) {
            return `    printf("${match[1]}");`;
          }
          return '';
        }).filter(Boolean).join('\n')}
    
${acceptStatements.map(line => {
          const match = line.match(/ACCEPT\s+([A-Z-]+)/i);
          if (match) {
            const varName = match[1].toLowerCase().replace(/-/g, '_');
            return `    scanf("%s", ${varName});`;
          }
          return '';
        }).filter(Boolean).join('\n')}
    
    return 0;
}`;
        break;
        
      case 'shell':
        convertedCode = `#!/bin/bash
# Converted from COBOL to Shell Script

# Variable declarations
${variableDeclarations.map(line => {
          const match = line.trim().match(/^\d+\s+([A-Z-]+)\s+PIC/);
          if (match) {
            const varName = match[1].toLowerCase().replace(/-/g, '_');
            return `${varName}=""`;
          }
          return '';
        }).filter(Boolean).join('\n')}

# Main logic
${displayStatements.map(line => {
          const match = line.match(/DISPLAY\s+"([^"]+)"/i);
          if (match) {
            return `echo -n "${match[1]}"`;
          }
          return '';
        }).filter(Boolean).join('\n')}

${acceptStatements.map(line => {
          const match = line.match(/ACCEPT\s+([A-Z-]+)/i);
          if (match) {
            const varName = match[1].toLowerCase().replace(/-/g, '_');
            return `read ${varName}`;
          }
          return '';
        }).filter(Boolean).join('\n')}`;
        break;
        
      default:
        convertedCode = `// Conversion to ${target} not implemented yet`;
    }
    
    return convertedCode;
  };

  const handleRefactor = async () => {
    if (!sourceCode.trim()) return;
    
    setIsRefactoring(true);
    
    // Í∞ÑÎã®Ìïú COBOL Î≥ÄÌôò Î°úÏßÅ Ï†ÅÏö©
    setTimeout(() => {
      const convertedCode = convertCobolToTarget(sourceCode, targetLanguage);
      setRefactoredCode(convertedCode);
      setIsRefactoring(false);
    }, 1500);
  };

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const content = e.target?.result as string;
        setSourceCode(content);
        setFileName(file.name);
        // ÏÉà ÌååÏùº ÏÑ†ÌÉù Ïãú Ïù¥Ï†Ñ Î≥ÄÌôò Í≤∞Í≥º Ï¥àÍ∏∞Ìôî
        setRefactoredCode('');
      };
      reader.readAsText(file);
    }
  };

  const handleFileSelect = () => {
    fileInputRef.current?.click();
  };

  const sampleCobolCode = `       IDENTIFICATION DIVISION.
       PROGRAM-ID. SAMPLE-PROGRAM.
       
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 WS-NAME PIC X(20).
       01 WS-COUNT PIC 9(3) VALUE 0.
       
       PROCEDURE DIVISION.
       MAIN-LOGIC.
           DISPLAY "Enter name: ".
           ACCEPT WS-NAME.
           DISPLAY "Hello " WS-NAME.
           STOP RUN.`;

  const loadSample = () => {
    setSourceCode(sampleCobolCode);
    setFileName('SAMPLE-PROGRAM.cob');
    // ÏÉòÌîå Î°úÎìú Ïãú Ïù¥Ï†Ñ Î≥ÄÌôò Í≤∞Í≥º Ï¥àÍ∏∞Ìôî
    setRefactoredCode('');
  };

  const loadEmpPay01Sample = () => {
    // /data/EMPPAY01.cobÏùò ÎÇ¥Ïö©ÏùÑ Î°úÎìú
    const empPayCobol = `       IDENTIFICATION DIVISION.
       PROGRAM-ID. EMPPAY01.
       AUTHOR. SAMPLE-DEVELOPER.
       DATE-WRITTEN. 2025-07-06.
       
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT EMPLOYEE-FILE ASSIGN TO "EMPLOYEE.DAT"
               ORGANIZATION IS LINE SEQUENTIAL.
           SELECT PAYROLL-REPORT ASSIGN TO "PAYROLL.RPT"
               ORGANIZATION IS LINE SEQUENTIAL.
       
       DATA DIVISION.
       FILE SECTION.
       FD  EMPLOYEE-FILE.
       01  EMPLOYEE-RECORD.
           05  EMP-ID              PIC 9(6).
           05  EMP-NAME            PIC X(30).
           05  EMP-DEPARTMENT      PIC X(10).
           05  EMP-HOURLY-RATE     PIC 9(3)V99.
           05  EMP-HOURS-WORKED    PIC 9(3)V99.
           05  EMP-STATUS          PIC X(1).
       
       FD  PAYROLL-REPORT.
       01  REPORT-LINE             PIC X(132).
       
       WORKING-STORAGE SECTION.
       01  WS-FLAGS.
           05  WS-EOF-FLAG         PIC X(1) VALUE 'N'.
               88  EOF-REACHED     VALUE 'Y'.
           05  WS-VALID-RECORD     PIC X(1) VALUE 'Y'.
               88  RECORD-VALID    VALUE 'Y'.
               88  RECORD-INVALID  VALUE 'N'.
       
       01  WS-CALCULATIONS.
           05  WS-GROSS-PAY        PIC 9(7)V99.
           05  WS-TAX-AMOUNT       PIC 9(7)V99.
           05  WS-NET-PAY          PIC 9(7)V99.
           05  WS-OVERTIME-HOURS   PIC 9(3)V99.
           05  WS-REGULAR-HOURS    PIC 9(3)V99.
           05  WS-OVERTIME-PAY     PIC 9(7)V99.
           05  WS-REGULAR-PAY      PIC 9(7)V99.
       
       01  WS-CONSTANTS.
           05  WS-TAX-RATE         PIC V999 VALUE .125.
           05  WS-OVERTIME-RATE    PIC V99 VALUE 1.5.
           05  WS-STANDARD-HOURS   PIC 99 VALUE 40.
       
       01  WS-TOTALS.
           05  WS-TOTAL-EMPLOYEES  PIC 9(5) VALUE ZERO.
           05  WS-TOTAL-GROSS      PIC 9(9)V99 VALUE ZERO.
           05  WS-TOTAL-TAX        PIC 9(9)V99 VALUE ZERO.
           05  WS-TOTAL-NET        PIC 9(9)V99 VALUE ZERO.
       
       PROCEDURE DIVISION.
       MAIN-PROCEDURE.
           PERFORM INITIALIZE-PROGRAM
           PERFORM PROCESS-EMPLOYEES
           PERFORM FINALIZE-PROGRAM
           STOP RUN.
       
       INITIALIZE-PROGRAM.
           OPEN INPUT EMPLOYEE-FILE
           OPEN OUTPUT PAYROLL-REPORT
           PERFORM WRITE-HEADERS
           PERFORM READ-EMPLOYEE-RECORD.
       
       PROCESS-EMPLOYEES.
           PERFORM UNTIL EOF-REACHED
               PERFORM VALIDATE-EMPLOYEE-RECORD
               IF RECORD-VALID
                   PERFORM CALCULATE-PAYROLL
                   PERFORM WRITE-DETAIL-LINE
                   PERFORM UPDATE-TOTALS
               ELSE
                   DISPLAY "INVALID RECORD: " EMP-ID
               END-IF
               PERFORM READ-EMPLOYEE-RECORD
           END-PERFORM.`;
    
    setSourceCode(empPayCobol);
    setFileName('EMPPAY01.cob');
    // EMPPAY01 Î°úÎìú Ïãú Ïù¥Ï†Ñ Î≥ÄÌôò Í≤∞Í≥º Ï¥àÍ∏∞Ìôî
    setRefactoredCode('');
  };

  const loadEmpPay02Sample = () => {
    // /data/EMPPAY02.cobÏùò ÎÇ¥Ïö©ÏùÑ Î°úÎìú
    const empPay02Cobol = `       IDENTIFICATION DIVISION.
       PROGRAM-ID. EMPPAY02.
       AUTHOR. SAMPLE-DEVELOPER.
       DATE-WRITTEN. 2025-07-06.
       
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT EMPLOYEE-FILE ASSIGN TO "EMPLOYEE.DAT"
               ORGANIZATION IS LINE SEQUENTIAL.
           SELECT PAYROLL-REPORT ASSIGN TO "PAYROLL.RPT"
               ORGANIZATION IS LINE SEQUENTIAL.
       
       DATA DIVISION.
       FILE SECTION.
       FD  EMPLOYEE-FILE.
       01  EMPLOYEE-RECORD.
           05  EMP-ID              PIC 9(6).
           05  EMP-NAME            PIC X(30).
           05  EMP-DEPARTMENT      PIC X(10).
           05  EMP-HOURLY-RATE     PIC 9(3)V99.
           05  EMP-HOURS-WORKED    PIC 9(3)V99.
           05  EMP-STATUS          PIC X(1).
       
       FD  PAYROLL-REPORT.
       01  REPORT-LINE             PIC X(132).
       
       WORKING-STORAGE SECTION.
       01  WS-FLAGS.
           05  WS-EOF-FLAG         PIC X(1) VALUE 'N'.
               88  EOF-REACHED     VALUE 'Y'.
           05  WS-VALID-RECORD     PIC X(1) VALUE 'Y'.
               88  RECORD-VALID    VALUE 'Y'.
               88  RECORD-INVALID  VALUE 'N'.
       
       01  WS-CALCULATIONS.
           05  WS-GROSS-PAY        PIC 9(7)V99.
           05  WS-TAX-AMOUNT       PIC 9(7)V99.
           05  WS-NET-PAY          PIC 9(7)V99.
           05  WS-OVERTIME-HOURS   PIC 9(3)V99.
           05  WS-REGULAR-HOURS    PIC 9(3)V99.
           05  WS-OVERTIME-PAY     PIC 9(7)V99.
           05  WS-REGULAR-PAY      PIC 9(7)V99.
       
       01  WS-CONSTANTS.
           05  WS-TAX-RATE         PIC V999 VALUE .125.
           05  WS-OVERTIME-RATE    PIC V99 VALUE 1.5.
           05  WS-STANDARD-HOURS   PIC 99 VALUE 40.
       
       01  WS-TOTALS.
           05  WS-TOTAL-EMPLOYEES  PIC 9(5) VALUE ZERO.
           05  WS-TOTAL-GROSS      PIC 9(9)V99 VALUE ZERO.
           05  WS-TOTAL-TAX        PIC 9(9)V99 VALUE ZERO.
           05  WS-TOTAL-NET        PIC 9(9)V99 VALUE ZERO.
       
       PROCEDURE DIVISION.
       MAIN-PROCEDURE.
           PERFORM INITIALIZE-PROGRAM
           PERFORM PROCESS-EMPLOYEES
           PERFORM FINALIZE-PROGRAM
           STOP RUN.`;
    
    setSourceCode(empPay02Cobol);
    setFileName('EMPPAY02.cob');
    // EMPPAY02 Î°úÎìú Ïãú Ïù¥Ï†Ñ Î≥ÄÌôò Í≤∞Í≥º Ï¥àÍ∏∞Ìôî
    setRefactoredCode('');
  };

  // COBOL ÏÜåÏä§ÏóêÏÑú currency ÌòïÏãù Ï∂îÏ∂ú
  const extractCurrencyFormat = (cobolCode: string): { symbol: string, pattern: string } => {
    // PIC Ï†àÏóêÏÑú currency Ìå®ÌÑ¥ Ï∞æÍ∏∞ - Îã¨Îü¨ÏôÄ ÏóîÌôî Î™®Îëê ÏßÄÏõê
    const dollarMatch = cobolCode.match(/PIC\s+\$+[,\$]*\d+\.?\d*/i);
    const yenMatch = cobolCode.match(/PIC\s+\\+[,\\]*\d+\.?\d*/i);
    
    console.log('Dollar match:', dollarMatch);
    console.log('Yen match:', yenMatch);
    
    if (dollarMatch) {
      console.log('Detected currency: Dollar ($)');
      return { symbol: '$', pattern: '$#,##0.00' };
    } else if (yenMatch) {
      console.log('Detected currency: Yen (¬•)');
      return { symbol: '¬•', pattern: '¬•#,##0' };
    }
    
    // Í∏∞Î≥∏Í∞íÏùÄ Îã¨Îü¨
    console.log('Using default currency: Dollar ($)');
    return { symbol: '$', pattern: '$#,##0.00' };
  };

  const convertEmpPayToJava = (cobolCode: string, programName: string = 'EMPPAY01'): string => {
    // Ïã§Ï†ú COBOL ÏÜåÏä§ÏóêÏÑú currency ÌòïÏãù Ï∂îÏ∂ú
    const currency = extractCurrencyFormat(cobolCode);
    console.log('Detected currency:', currency);
    return `// Converted from COBOL ${programName} to Java
import java.io.*;
import java.util.*;
import java.text.DecimalFormat;

public class ${programName.replace('.cob', '').replace('-', '_')} {
    // Employee record structure
    static class EmployeeRecord {
        int empId;
        String empName;
        String empDepartment;
        double empHourlyRate;
        double empHoursWorked;
        char empStatus;
        
        public EmployeeRecord(int id, String name, String dept, double rate, double hours, char status) {
            this.empId = id;
            this.empName = name;
            this.empDepartment = dept;
            this.empHourlyRate = rate;
            this.empHoursWorked = hours;
            this.empStatus = status;
        }
    }
    
    // Working storage variables
    private static boolean eofReached = false;
    private static double grossPay = 0.0;
    private static double taxAmount = 0.0;
    private static double netPay = 0.0;
    private static double overtimeHours = 0.0;
    private static double regularHours = 0.0;
    private static double overtimePay = 0.0;
    private static double regularPay = 0.0;
    
    // Constants
    private static final double TAX_RATE = 0.125;
    private static final double OVERTIME_RATE = 1.5;
    private static final int STANDARD_HOURS = 40;
    
    // Totals
    private static int totalEmployees = 0;
    private static double totalGross = 0.0;
    private static double totalTax = 0.0;
    private static double totalNet = 0.0;
    
    private static DecimalFormat currencyFormat = new DecimalFormat("${currency.pattern}");
    
    public static void main(String[] args) {
        System.out.println("=== ${programName} PAYROLL SYSTEM ===\\n");
        
        // Sample employee data (simulating EMPLOYEE.DAT file reading)
        List<EmployeeRecord> employees = Arrays.asList(
            new EmployeeRecord(100001, "Áî∞‰∏≠Â§™ÈÉé", "Ôº©Ôº¥", 25.50, 45.0, 'A'),
            new EmployeeRecord(100002, "‰ΩêËó§Ëä±Â≠ê", "‰∫∫‰∫ã", 22.75, 40.0, 'A'),
            new EmployeeRecord(100003, "Èà¥Êú®‰∏ÄÈÉé", "ÁµåÁêÜ", 28.00, 50.0, 'A'),
            new EmployeeRecord(100004, "È´òÊ©ãÁæéÂí≤", "Âñ∂Ê•≠", 24.25, 38.5, 'A'),
            new EmployeeRecord(100005, "Â±±Áî∞Ê¨°ÈÉé", "Ôº©Ôº¥", 26.80, 42.0, 'A')
        );
        
        initializeProgram();
        processEmployees(employees);
        finalizeProgram();
    }
    
    private static void initializeProgram() {
        System.out.println("Initializing payroll processing...\\n");
        writeHeaders();
    }
    
    private static void writeHeaders() {
        System.out.println("                                          EMPLOYEE PAYROLL REPORT\\n");
        System.out.println("EMP ID  EMPLOYEE NAME                  DEPARTMENT  GROSS PAY    TAX AMOUNT   NET PAY");
        System.out.println("======  ==============================  ==========  ===========  ===========  ===========");
    }
    
    private static void processEmployees(List<EmployeeRecord> employees) {
        for (EmployeeRecord emp : employees) {
            if (validateEmployeeRecord(emp)) {
                calculatePayroll(emp);
                writeDetailLine(emp);
                updateTotals();
            } else {
                System.out.println("INVALID RECORD: " + emp.empId);
            }
        }
    }
    
    private static boolean validateEmployeeRecord(EmployeeRecord emp) {
        if (emp.empId <= 0 || emp.empId > 999999) return false;
        if (emp.empHourlyRate <= 0 || emp.empHourlyRate > 200) return false;
        if (emp.empHoursWorked < 0 || emp.empHoursWorked > 80) return false;
        if (emp.empStatus != 'A' && emp.empStatus != 'I') return false;
        return true;
    }
    
    private static void calculatePayroll(EmployeeRecord emp) {
        if (emp.empHoursWorked > STANDARD_HOURS) {
            regularHours = STANDARD_HOURS;
            overtimeHours = emp.empHoursWorked - STANDARD_HOURS;
            regularPay = regularHours * emp.empHourlyRate;
            overtimePay = overtimeHours * emp.empHourlyRate * OVERTIME_RATE;
            grossPay = regularPay + overtimePay;
        } else {
            grossPay = emp.empHoursWorked * emp.empHourlyRate;
        }
        
        taxAmount = grossPay * TAX_RATE;
        netPay = grossPay - taxAmount;
    }
    
    private static void writeDetailLine(EmployeeRecord emp) {
        System.out.printf("%06d  %-30s  %-10s  %11s  %11s  %11s%n",
            emp.empId,
            emp.empName,
            emp.empDepartment,
            currencyFormat.format(grossPay),
            currencyFormat.format(taxAmount),
            currencyFormat.format(netPay)
        );
    }
    
    private static void updateTotals() {
        totalEmployees++;
        totalGross += grossPay;
        totalTax += taxAmount;
        totalNet += netPay;
    }
    
    private static void finalizeProgram() {
        writeSummary();
        System.out.println("\\nPROCESSING COMPLETE. TOTAL EMPLOYEES: " + totalEmployees);
        System.out.println("\\n=== PAYROLL PROCESSING FINISHED ===\\n");
    }
    
    private static void writeSummary() {
        System.out.println("\\n======  ==============================  ==========  ===========  ===========  ===========");
        System.out.printf("TOTALS:                                             %11s  %11s  %11s%n",
            currencyFormat.format(totalGross),
            currencyFormat.format(totalTax),
            currencyFormat.format(totalNet)
        );
        System.out.println("======  ==============================  ==========  ===========  ===========  ===========");
    }
}`;
  };

  const handleExecute = async () => {
    if (!refactoredCode.trim()) return;
    setIsTerminalOpen(true);
  };

  const executeJavaCode = async (command: string): Promise<string> => {
    // Ïã§Ï†ú Java Ïª¥ÌååÏùº Î∞è Ïã§Ìñâ ÏãúÎÆ¨Î†àÏù¥ÏÖò
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const className = fileName.replace('.cob', '').replace('-', '_');
    const programId = fileName.replace('.cob', '').toUpperCase();
    
    // Í∞Å ÏÉòÌîåÎ≥Ñ Ïã§Ï†ú Ïã§Ìñâ Í≤∞Í≥º ÏãúÎÆ¨Î†àÏù¥ÏÖò
    const baseOutput = `Compiling Java code...
javac ${className}.java

Running Java application...
java ${className}

`;

    switch (programId) {
      case 'HELLO01':
        return baseOutput + `„ÅäÂêçÂâç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
Áî∞‰∏≠Â§™ÈÉéÊßò

Execution completed successfully.`;

      case 'CUST01':
        return baseOutput + `È°ßÂÆ¢„Éû„Çπ„ÇøÁÖß‰ºö„Éó„É≠„Ç∞„É©„É†
========================
È°ßÂÆ¢Áï™Âè∑Ôºö100001
È°ßÂÆ¢Âêç„ÄÄÔºöÁî∞‰∏≠Â§™ÈÉé
‰∏é‰ø°ÈôêÂ∫¶Ôºö1000000 ÂÜÜ
------------------------
È°ßÂÆ¢Áï™Âè∑Ôºö100002
È°ßÂÆ¢Âêç„ÄÄÔºö‰ΩêËó§Ëä±Â≠ê
‰∏é‰ø°ÈôêÂ∫¶Ôºö1500000 ÂÜÜ
------------------------
È°ßÂÆ¢Áï™Âè∑Ôºö100003
È°ßÂÆ¢Âêç„ÄÄÔºöÈà¥Êú®‰∏ÄÈÉé
‰∏é‰ø°ÈôêÂ∫¶Ôºö2000000 ÂÜÜ
------------------------
È°ßÂÆ¢Áï™Âè∑Ôºö100004
È°ßÂÆ¢Âêç„ÄÄÔºöÈ´òÊ©ãÁæéÂí≤
‰∏é‰ø°ÈôêÂ∫¶Ôºö800000 ÂÜÜ
------------------------
È°ßÂÆ¢Áï™Âè∑Ôºö100005
È°ßÂÆ¢Âêç„ÄÄÔºöÂ±±Áî∞Ê¨°ÈÉé
‰∏é‰ø°ÈôêÂ∫¶Ôºö1200000 ÂÜÜ
------------------------
 
Âá¶ÁêÜÁµêÊûú„Çµ„Éû„É™„Éº
================
Á∑èÈ°ßÂÆ¢Êï∞„ÄÄ„ÄÄÔºö6 ‰ª∂
ÊúâÂäπÈ°ßÂÆ¢Êï∞„ÄÄÔºö5 ‰ª∂
‰∏é‰ø°ÈôêÂ∫¶Á∑èÈ°çÔºö6500000 ÂÜÜ

Execution completed successfully.`;

      case 'BANK01':
        return baseOutput + `ÈäÄË°åÂèñÂºïÂá¶ÁêÜ„Ç∑„Çπ„ÉÜ„É†
====================

Âè£Â∫ßÁï™Âè∑„ÇíÂÖ•ÂäõÔºö
1234567890

Âè£Â∫ßÂêçÁæ©ÔºöÂ±±Áî∞Â§™ÈÉé
ÁèæÂú®ÊÆãÈ´òÔºö¬•1,250,000 ÂÜÜ

ÂèñÂºïÁ®ÆÂà•„ÇíÈÅ∏ÊäûÔºö
1: È†êÂÖ•
2: ÂºïÂá∫
3: ÊÆãÈ´òÁÖß‰ºö
1

È†êÂÖ•ÈáëÈ°ç„ÇíÂÖ•ÂäõÔºö
50000

È†êÂÖ•Âá¶ÁêÜ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü
Êñ∞ÊÆãÈ´òÔºö¬•1,300,000 ÂÜÜ

Á∂ö„Åë„Åæ„Åô„ÅãÔºü (Y/N)Ôºö
N

„ÅîÂà©Áî®„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åó„Åü

Execution completed successfully.`;

      case 'STOCK01':
        return baseOutput + `Âú®Â∫´ÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†
================
ÂïÜÂìÅ„Ç≥„Éº„Éâ„ÇíÂÖ•ÂäõÔºö
PROD0001

ÂïÜÂìÅÂêçÔºö„Éó„É™„É≥„Çø„ÉºÁî®Á¥ôA4
ÁèæÂú®Âú®Â∫´Êï∞Ôºö150 ÂÄã
ÊúÄÂ∞èÂú®Â∫´Êï∞Ôºö200 ÂÄã

*** Áô∫Ê≥®„ÅåÂøÖË¶Å„Åß„Åô ***
ÂïÜÂìÅ„Ç≥„Éº„ÉâÔºöPROD0001„ÄÄÁô∫Ê≥®Êï∞ÈáèÔºö250 ÂÄã

Execution completed successfully.`;

      case 'SALES01':
        return baseOutput + `Â£≤‰∏äÈõÜË®à„Éó„É≠„Ç∞„É©„É†
================

Â£≤‰∏ä„Éá„Éº„Çø„ÇíÂá¶ÁêÜ‰∏≠...

Â£≤‰∏äÊó•Âà•ÈõÜË®à
===========
2025-01-15  ÂïÜÂìÅA  ¬•125,000
2025-01-15  ÂïÜÂìÅB  ¬•89,500
2025-01-16  ÂïÜÂìÅA  ¬•156,000
2025-01-16  ÂïÜÂìÅC  ¬•234,500
2025-01-17  ÂïÜÂìÅB  ¬•198,000

ÊúàÈñìÂ£≤‰∏äÂêàË®àÔºö¬•803,000

Execution completed successfully.`;

      case 'BONUS01':
        return baseOutput + `Ë≥û‰∏éË®àÁÆó„Ç∑„Çπ„ÉÜ„É†
================
Á§æÂì°Áï™Âè∑„ÇíÂÖ•ÂäõÔºö
100001

Ë≥û‰∏éÊòéÁ¥∞Êõ∏
==========
Á§æÂì°Áï™Âè∑Ôºö100001
Á§æÂì°Âêç„ÄÄÔºöÁî∞‰∏≠Â§™ÈÉé

Âü∫Êú¨Áµ¶„ÄÄ„ÄÄ„ÄÄÔºö¬•350,000 ÂÜÜ
Ë©ï‰æ°Áéá„ÄÄ„ÄÄ„ÄÄÔºö1.2
Âã§Á∂öÂπ¥Êï∞„ÄÄ„ÄÄÔºö5 Âπ¥

Âü∫Êú¨Ë≥û‰∏é„ÄÄ„ÄÄÔºö¬•700,000 ÂÜÜ
ÊàêÊûúË≥û‰∏é„ÄÄ„ÄÄÔºö¬•140,000 ÂÜÜ
Âã§Á∂öË≥û‰∏é„ÄÄ„ÄÄÔºö¬•50,000 ÂÜÜ
================================
Ë≥û‰∏éÂêàË®à„ÄÄ„ÄÄÔºö¬•890,000 ÂÜÜ

Execution completed successfully.`;

      case 'TAX01':
        return baseOutput + `ÊâÄÂæóÁ®éË®àÁÆó„Ç∑„Çπ„ÉÜ„É†
================
Âπ¥Âèé„ÇíÂÖ•ÂäõÔºö
5000000

ÊâÄÂæóÁ®éË®àÁÆóÁµêÊûú
=============
Âπ¥Âèé„ÄÄ„ÄÄ„ÄÄ„ÄÄÔºö¬•5,000,000
Âü∫Á§éÊéßÈô§„ÄÄ„ÄÄÔºö¬•480,000
Ë™≤Á®éÊâÄÂæó„ÄÄ„ÄÄÔºö¬•4,520,000
ÊâÄÂæóÁ®éÈ°ç„ÄÄ„ÄÄÔºö¬•572,500
‰ΩèÊ∞ëÁ®éÈ°ç„ÄÄ„ÄÄÔºö¬•452,000
ÊâãÂèñ„ÇäÂπ¥Âèé„ÄÄÔºö¬•3,975,500

Execution completed successfully.`;

      case 'TIME01':
        return baseOutput + `Âã§ÊÄ†ÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†
================
Á§æÂì°Áï™Âè∑„ÇíÂÖ•ÂäõÔºö
100001

Âã§ÊÄ†Ë®òÈå≤
========
Á§æÂì°Âêç„ÄÄ„ÄÄÔºöÁî∞‰∏≠Â§™ÈÉé
Âá∫Âã§ÊôÇÂàª„ÄÄÔºö09:00
ÈÄÄÂã§ÊôÇÂàª„ÄÄÔºö18:30
‰ºëÊÜ©ÊôÇÈñì„ÄÄÔºö1ÊôÇÈñì
Âã§ÂãôÊôÇÈñì„ÄÄÔºö8ÊôÇÈñì30ÂàÜ
ÊÆãÊ•≠ÊôÇÈñì„ÄÄÔºö0ÊôÇÈñì30ÂàÜ

ÊúàÈñìÂã§ÂãôÂÆüÁ∏æ
===========
Á∑èÂã§ÂãôÊó•Êï∞Ôºö22Êó•
Á∑èÂã§ÂãôÊôÇÈñìÔºö176ÊôÇÈñì
Á∑èÊÆãÊ•≠ÊôÇÈñìÔºö15ÊôÇÈñì

Execution completed successfully.`;

      case 'LOAN01':
        return baseOutput + `ËûçË≥áË®àÁÆó„Ç∑„Çπ„ÉÜ„É†
================
ËûçË≥áÈáëÈ°ç„ÇíÂÖ•ÂäõÔºö
10000000

ËûçË≥áÊù°‰ª∂Ë®àÁÆóÁµêÊûú
===============
ËûçË≥áÈáëÈ°ç„ÄÄ„ÄÄÔºö¬•10,000,000
Âπ¥Âà©Áéá„ÄÄ„ÄÄ„ÄÄÔºö3.5%
ËøîÊ∏àÊúüÈñì„ÄÄ„ÄÄÔºö20Âπ¥
ÊúàËøîÊ∏àÈ°ç„ÄÄ„ÄÄÔºö¬•57,998

ËøîÊ∏àÁ∑èÈ°ç„ÄÄ„ÄÄÔºö¬•13,919,520
Âà©ÊÅØÁ∑èÈ°ç„ÄÄ„ÄÄÔºö¬•3,919,520

Execution completed successfully.`;

      case 'ORDER01':
        return baseOutput + `ÂèóÊ≥®Âá¶ÁêÜ„Ç∑„Çπ„ÉÜ„É†
================
ÂèóÊ≥®„Éá„Éº„Çø„ÇíÂá¶ÁêÜ‰∏≠...

ÂèóÊ≥®ÊòéÁ¥∞
========
ÂèóÊ≥®Áï™Âè∑ÔºöORD20250706001
È°ßÂÆ¢Âêç„ÄÄÔºöÊ†™Âºè‰ºöÁ§æ„Çµ„É≥„Éó„É´
ÂïÜÂìÅÂêç„ÄÄÔºö„Éó„É™„É≥„Çø„ÉºÁî®Á¥ôA4
Êï∞Èáè„ÄÄ„ÄÄÔºö100ÁÆ±
Âçò‰æ°„ÄÄ„ÄÄÔºö¬•1,250
ÈáëÈ°ç„ÄÄ„ÄÄÔºö¬•125,000

ÂèóÊ≥®Áï™Âè∑ÔºöORD20250706002
È°ßÂÆ¢Âêç„ÄÄÔºö„Çµ„É≥„Éó„É´ÂïÜ‰∫ã
ÂïÜÂìÅÂêç„ÄÄÔºö„Éú„Éº„É´„Éö„É≥ÔºàÈªíÔºâ
Êï∞Èáè„ÄÄ„ÄÄÔºö500Êú¨
Âçò‰æ°„ÄÄ„ÄÄÔºö¬•150
ÈáëÈ°ç„ÄÄ„ÄÄÔºö¬•75,000

Êú¨Êó•„ÅÆÂèóÊ≥®ÂêàË®àÔºö¬•200,000

Execution completed successfully.`;

      case 'RETIRE01':
        return baseOutput + `ÈÄÄËÅ∑ÈáëË®àÁÆó„Ç∑„Çπ„ÉÜ„É†
==================
Á§æÂì°Áï™Âè∑„ÇíÂÖ•ÂäõÔºö
100001

ÈÄÄËÅ∑ÈáëË®àÁÆóÊõ∏
============
Á§æÂì°Áï™Âè∑„ÄÄÔºö100001
Á§æÂì°Âêç„ÄÄ„ÄÄÔºöÁî∞‰∏≠Â§™ÈÉé

Âã§Á∂öÂπ¥Êï∞„ÄÄÔºö34.92 Âπ¥
ÊúÄÁµÇÊúàÁµ¶„ÄÄÔºö¬•580,000 ÂÜÜ

Âü∫Êú¨ÈÄÄËÅ∑ÈáëÔºö¬•10,133,600 ÂÜÜ
Âä†ÁÆóÈáë„ÄÄ„ÄÄÔºö¬•3,040,080 ÂÜÜ
ÈÄÄËÅ∑ÈáëÁ∑èÈ°çÔºö¬•13,173,680 ÂÜÜ
Ê∫êÊ≥âÂæ¥Âèé„ÄÄÔºö¬•2,634,736 ÂÜÜ
================================
ÊâãÂèñÈ°ç„ÄÄ„ÄÄÔºö¬•10,538,944 ÂÜÜ

Execution completed successfully.`;

      default:
        // EMPPAY01, EMPPAY02Ïùò Í≤ΩÏö∞ Í∏∞Ï°¥ Í∏âÏó¨ ÏãúÏä§ÌÖú Ï∂úÎ†• ÏÇ¨Ïö©
        const currency = extractCurrencyFormat(sourceCode);
        const amounts = currency.symbol === '¬•' ? {
          emp1: { gross: '¬•114,875', tax: '¬•14,359', net: '¬•100,516' },
          emp2: { gross: '¬•91,000', tax: '¬•11,375', net: '¬•79,625' },
          emp3: { gross: '¬•154,000', tax: '¬•19,250', net: '¬•134,750' },
          emp4: { gross: '¬•93,363', tax: '¬•11,670', net: '¬•81,693' },
          emp5: { gross: '¬•120,120', tax: '¬•15,015', net: '¬•105,105' },
          totals: { gross: '¬•573,358', tax: '¬•71,670', net: '¬•501,688' }
        } : {
          emp1: { gross: '$1,148.75', tax: '$143.59', net: '$1,005.16' },
          emp2: { gross: '$910.00', tax: '$113.75', net: '$796.25' },
          emp3: { gross: '$1,540.00', tax: '$192.50', net: '$1,347.50' },
          emp4: { gross: '$933.63', tax: '$116.70', net: '$816.93' },
          emp5: { gross: '$1,201.20', tax: '$150.15', net: '$1,051.05' },
          totals: { gross: '$5,733.58', tax: '$716.70', net: '$5,016.88' }
        };
        
        return baseOutput + `=== ${fileName} PAYROLL SYSTEM ===

Initializing payroll processing...

                                          EMPLOYEE PAYROLL REPORT

EMP ID  EMPLOYEE NAME                  DEPARTMENT  GROSS PAY    TAX AMOUNT   NET PAY
======  ==============================  ==========  ===========  ===========  ===========
100001  Áî∞‰∏≠Â§™ÈÉé                       Ôº©Ôº¥        ${amounts.emp1.gross.padStart(11)}  ${amounts.emp1.tax.padStart(11)}  ${amounts.emp1.net.padStart(11)}
100002  ‰ΩêËó§Ëä±Â≠ê                       ‰∫∫‰∫ã        ${amounts.emp2.gross.padStart(11)}  ${amounts.emp2.tax.padStart(11)}  ${amounts.emp2.net.padStart(11)}
100003  Èà¥Êú®‰∏ÄÈÉé                       ÁµåÁêÜ        ${amounts.emp3.gross.padStart(11)}  ${amounts.emp3.tax.padStart(11)}  ${amounts.emp3.net.padStart(11)}
100004  È´òÊ©ãÁæéÂí≤                       Âñ∂Ê•≠        ${amounts.emp4.gross.padStart(11)}  ${amounts.emp4.tax.padStart(11)}  ${amounts.emp4.net.padStart(11)}
100005  Â±±Áî∞Ê¨°ÈÉé                       Ôº©Ôº¥        ${amounts.emp5.gross.padStart(11)}  ${amounts.emp5.tax.padStart(11)}  ${amounts.emp5.net.padStart(11)}

======  ==============================  ==========  ===========  ===========  ===========
TOTALS:                                             ${amounts.totals.gross.padStart(11)}  ${amounts.totals.tax.padStart(11)}  ${amounts.totals.net.padStart(11)}
======  ==============================  ==========  ===========  ===========  ===========

PROCESSING COMPLETE. TOTAL EMPLOYEES: 5

=== PAYROLL PROCESSING FINISHED ===

Execution completed successfully.`;
    }
  };

  return (
    <div className="h-full p-8">
      <div className="mb-8">
        <h1 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">
          {t('cobolRefactor.title')}
        </h1>
        <p className="text-gray-600 dark:text-gray-400">
          {t('cobolRefactor.subtitle')}
        </p>
      </div>

      {/* ÏÑ§Ï†ï Ìå®ÎÑê */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6 mb-6 border border-gray-200 dark:border-gray-700">
        <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
          {t('cobolRefactor.settingsTitle')}
        </h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              {t('cobolRefactor.targetLanguage')}
            </label>
            <div className="grid grid-cols-2 gap-2">
              {targetLanguages.map((lang) => (
                <button
                  key={lang.value}
                  onClick={() => {
                    setTargetLanguage(lang.value as any);
                    // ÎåÄÏÉÅ Ïñ∏Ïñ¥ Î≥ÄÍ≤Ω Ïãú Î™®Îì† ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
                    setRefactoredCode('');
                    setSourceCode('');
                    setFileName('');
                  }}
                  className={`p-3 rounded-lg border transition-colors ${
                    targetLanguage === lang.value
                      ? 'bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-800'
                      : 'bg-gray-50 dark:bg-gray-700 border-gray-200 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-600'
                  }`}
                >
                  <div className="text-center">
                    <div className="text-2xl mb-1">{lang.icon}</div>
                    <div className={`text-sm font-medium ${
                      targetLanguage === lang.value
                        ? 'text-blue-900 dark:text-blue-100'
                        : 'text-gray-900 dark:text-white'
                    }`}>
                      {lang.label}
                    </div>
                  </div>
                </button>
              ))}
            </div>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              {t('cobolRefactor.quickActions')}
            </label>
            <div className="space-y-2">
              <button
                onClick={handleFileSelect}
                className="w-full flex items-center justify-center px-4 py-2 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
              >
                <FolderOpenIcon className="w-4 h-4 mr-2" />
                {t('common.selectFile')}
              </button>
              <input
                ref={fileInputRef}
                type="file"
                accept=".cbl,.cob,.cobol,.txt"
                onChange={handleFileUpload}
                className="hidden"
              />
              {fileName && (
                <div className="text-xs text-gray-600 dark:text-gray-400 mt-2">
                  Selected: {fileName}
                </div>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* ÏΩîÎìú Ìé∏Ïßë ÏòÅÏó≠ */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* ÏÜåÏä§ ÏΩîÎìú */}
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700">
          <div className="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700">
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
              {t('cobolRefactor.sourceCode')}
            </h3>
            <div className="flex space-x-2">
              <button
                onClick={handleRefactor}
                disabled={!sourceCode.trim() || isRefactoring}
                className="flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white rounded-lg transition-colors"
              >
                {isRefactoring ? (
                  <ArrowPathIcon className="w-4 h-4 mr-2 animate-spin" />
                ) : (
                  <PlayIcon className="w-4 h-4 mr-2" />
                )}
                {isRefactoring ? t('cobolRefactor.refactoring') : t('cobolRefactor.executeRefactor')}
              </button>
            </div>
          </div>
          <div className="p-4">
            <textarea
              value={sourceCode}
              onChange={(e) => setSourceCode(e.target.value)}
              placeholder={t('cobolRefactor.sourcePlaceholder')}
              className="w-full h-96 font-mono text-sm bg-gray-50 dark:bg-gray-900 border border-gray-200 dark:border-gray-600 rounded-lg p-4 text-gray-900 dark:text-white resize-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
        </div>

        {/* Î¶¨Ìå©ÌÜ†ÎßÅÎêú ÏΩîÎìú */}
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700">
          <div className="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700">
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
              {t('cobolRefactor.refactoredCode', { language: targetLanguage.toUpperCase() })}
            </h3>
            {refactoredCode && (
              <div className="flex space-x-2">
                <button className="flex items-center px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors">
                  <CloudArrowDownIcon className="w-4 h-4 mr-2" />
                  {t('common.download')}
                </button>
                {targetLanguage === 'java' && (
                  <button 
                    onClick={handleExecute}
                    className="flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors"
                  >
                    <PlayIcon className="w-4 h-4 mr-2" />
                    ÂÆüË°å
                  </button>
                )}
              </div>
            )}
          </div>
          <div className="p-4">
            {isRefactoring ? (
              <div className="flex items-center justify-center h-96">
                <div className="text-center">
                  <ArrowPathIcon className="w-8 h-8 text-blue-500 animate-spin mx-auto mb-4" />
                  <p className="text-gray-600 dark:text-gray-400">
                    {t('cobolRefactor.converting', { language: targetLanguage.toUpperCase() })}
                  </p>
                </div>
              </div>
            ) : (
              <textarea
                value={refactoredCode}
                readOnly
                placeholder={t('cobolRefactor.refactoredPlaceholder', { language: targetLanguage.toUpperCase() })}
                className="w-full h-96 font-mono text-sm bg-gray-50 dark:bg-gray-900 border border-gray-200 dark:border-gray-600 rounded-lg p-4 text-gray-900 dark:text-white resize-none"
              />
            )}
          </div>
        </div>
      </div>
      
      {/* Terminal Modal */}
      <Terminal
        isOpen={isTerminalOpen}
        onClose={() => setIsTerminalOpen(false)}
        title="Java Execution Terminal"
        command="java EMPPAY01"
        onExecute={executeJavaCode}
      />
    </div>
  );
};

export default CobolRefactorPage;